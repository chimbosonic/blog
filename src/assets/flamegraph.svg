<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="6381515070"><g><title>alloc::raw_vec::finish_grow (2,904,475 samples, 0.05%)</title><rect x="0.0000%" y="853" width="0.0455%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2904475"/><text x="0.2500%" y="863.50"></text></g><g><title>[anon] (5,830,041 samples, 0.09%)</title><rect x="0.0000%" y="869" width="0.0914%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5830041"/><text x="0.2500%" y="879.50"></text></g><g><title>malloc (2,925,566 samples, 0.05%)</title><rect x="0.0455%" y="853" width="0.0458%" height="15" fill="rgb(221,193,54)" fg:x="2904475" fg:w="2925566"/><text x="0.2955%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (956,124 samples, 0.01%)</title><rect x="0.0914%" y="437" width="0.0150%" height="15" fill="rgb(248,212,6)" fg:x="5830041" fg:w="956124"/><text x="0.3414%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (956,124 samples, 0.01%)</title><rect x="0.0914%" y="421" width="0.0150%" height="15" fill="rgb(208,68,35)" fg:x="5830041" fg:w="956124"/><text x="0.3414%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (956,124 samples, 0.01%)</title><rect x="0.0914%" y="405" width="0.0150%" height="15" fill="rgb(232,128,0)" fg:x="5830041" fg:w="956124"/><text x="0.3414%" y="415.50"></text></g><g><title>alloc::alloc::alloc (956,124 samples, 0.01%)</title><rect x="0.0914%" y="389" width="0.0150%" height="15" fill="rgb(207,160,47)" fg:x="5830041" fg:w="956124"/><text x="0.3414%" y="399.50"></text></g><g><title>__rdl_alloc (956,124 samples, 0.01%)</title><rect x="0.0914%" y="373" width="0.0150%" height="15" fill="rgb(228,23,34)" fg:x="5830041" fg:w="956124"/><text x="0.3414%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (956,124 samples, 0.01%)</title><rect x="0.0914%" y="357" width="0.0150%" height="15" fill="rgb(218,30,26)" fg:x="5830041" fg:w="956124"/><text x="0.3414%" y="367.50"></text></g><g><title>malloc (956,124 samples, 0.01%)</title><rect x="0.0914%" y="341" width="0.0150%" height="15" fill="rgb(220,122,19)" fg:x="5830041" fg:w="956124"/><text x="0.3414%" y="351.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::decode (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="437" width="0.0470%" height="15" fill="rgb(250,228,42)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="447.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::huffman_decode (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="421" width="0.0470%" height="15" fill="rgb(240,193,28)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="431.50"></text></g><g><title>huff_tree_tap::encoding_map::EncodingMap::get_inverse (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="405" width="0.0470%" height="15" fill="rgb(216,20,37)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="389" width="0.0470%" height="15" fill="rgb(206,188,39)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="373" width="0.0470%" height="15" fill="rgb(217,207,13)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="357" width="0.0470%" height="15" fill="rgb(231,73,38)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="341" width="0.0470%" height="15" fill="rgb(225,20,46)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="325" width="0.0470%" height="15" fill="rgb(210,31,41)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="309" width="0.0470%" height="15" fill="rgb(221,200,47)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="293" width="0.0470%" height="15" fill="rgb(226,26,5)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="277" width="0.0470%" height="15" fill="rgb(249,33,26)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="261" width="0.0470%" height="15" fill="rgb(235,183,28)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="245" width="0.0470%" height="15" fill="rgb(221,5,38)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="255.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="229" width="0.0470%" height="15" fill="rgb(247,18,42)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="213" width="0.0470%" height="15" fill="rgb(241,131,45)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,996,484 samples, 0.05%)</title><rect x="0.1063%" y="197" width="0.0470%" height="15" fill="rgb(249,31,29)" fg:x="6786165" fg:w="2996484"/><text x="0.3563%" y="207.50"></text></g><g><title>test_bench (12,148,609 samples, 0.19%)</title><rect x="0.0000%" y="885" width="0.1904%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="12148609"/><text x="0.2500%" y="895.50"></text></g><g><title>__GI___clone3 (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="869" width="0.0990%" height="15" fill="rgb(238,160,17)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="879.50"></text></g><g><title>start_thread (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="853" width="0.0990%" height="15" fill="rgb(214,148,48)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="863.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="837" width="0.0990%" height="15" fill="rgb(232,36,49)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="821" width="0.0990%" height="15" fill="rgb(209,103,24)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="805" width="0.0990%" height="15" fill="rgb(229,88,8)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="789" width="0.0990%" height="15" fill="rgb(213,181,19)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="773" width="0.0990%" height="15" fill="rgb(254,191,54)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="783.50"></text></g><g><title>std::panic::catch_unwind (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="757" width="0.0990%" height="15" fill="rgb(241,83,37)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="767.50"></text></g><g><title>std::panicking::try (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="741" width="0.0990%" height="15" fill="rgb(233,36,39)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="751.50"></text></g><g><title>std::panicking::try::do_call (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="725" width="0.0990%" height="15" fill="rgb(226,3,54)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="709" width="0.0990%" height="15" fill="rgb(245,192,40)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="719.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="693" width="0.0990%" height="15" fill="rgb(238,167,29)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="703.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="677" width="0.0990%" height="15" fill="rgb(232,182,51)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="687.50"></text></g><g><title>test::run_test::_{{closure}} (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="661" width="0.0990%" height="15" fill="rgb(231,60,39)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="671.50"></text></g><g><title>test::run_test::_{{closure}} (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="645" width="0.0990%" height="15" fill="rgb(208,69,12)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="655.50"></text></g><g><title>test::run_test_in_process (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="629" width="0.0990%" height="15" fill="rgb(235,93,37)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="639.50"></text></g><g><title>std::panic::catch_unwind (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="613" width="0.0990%" height="15" fill="rgb(213,116,39)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="623.50"></text></g><g><title>std::panicking::try (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="597" width="0.0990%" height="15" fill="rgb(222,207,29)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="607.50"></text></g><g><title>std::panicking::try::do_call (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="581" width="0.0990%" height="15" fill="rgb(206,96,30)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="565" width="0.0990%" height="15" fill="rgb(218,138,4)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="575.50"></text></g><g><title>test::run_test_in_process::_{{closure}} (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="549" width="0.0990%" height="15" fill="rgb(250,191,14)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="559.50"></text></g><g><title>test::types::RunnableTest::run (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="533" width="0.0990%" height="15" fill="rgb(239,60,40)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="543.50"></text></g><g><title>test::__rust_begin_short_backtrace (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="517" width="0.0990%" height="15" fill="rgb(206,27,48)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="501" width="0.0990%" height="15" fill="rgb(225,35,8)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="485" width="0.0990%" height="15" fill="rgb(250,213,24)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="495.50"></text></g><g><title>tests::test_bench::_{{closure}} (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="469" width="0.0990%" height="15" fill="rgb(247,123,22)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="479.50"></text></g><g><title>tests::test_bench (6,318,568 samples, 0.10%)</title><rect x="0.0914%" y="453" width="0.0990%" height="15" fill="rgb(231,138,38)" fg:x="5830041" fg:w="6318568"/><text x="0.3414%" y="463.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::new (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="437" width="0.0371%" height="15" fill="rgb(231,145,46)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="447.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::huffman_encode (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="421" width="0.0371%" height="15" fill="rgb(251,118,11)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="431.50"></text></g><g><title>huff_tree_tap::encoding_map::EncodingMap::get (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="405" width="0.0371%" height="15" fill="rgb(217,147,25)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="389" width="0.0371%" height="15" fill="rgb(247,81,37)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="373" width="0.0371%" height="15" fill="rgb(209,12,38)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="357" width="0.0371%" height="15" fill="rgb(227,1,9)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="341" width="0.0371%" height="15" fill="rgb(248,47,43)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="325" width="0.0371%" height="15" fill="rgb(221,10,30)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,365,960 samples, 0.04%)</title><rect x="0.1533%" y="309" width="0.0371%" height="15" fill="rgb(210,229,1)" fg:x="9782649" fg:w="2365960"/><text x="0.4033%" y="319.50"></text></g><g><title>tests::test_huffmandata_decode::_{{closure}} (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="469" width="0.0158%" height="15" fill="rgb(222,148,37)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="479.50"></text></g><g><title>tests::test_huffmandata_decode (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="453" width="0.0158%" height="15" fill="rgb(234,67,33)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="463.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::decode (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="437" width="0.0158%" height="15" fill="rgb(247,98,35)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::Padded&gt;::from_vec_u8 (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="421" width="0.0158%" height="15" fill="rgb(247,138,52)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="431.50"></text></g><g><title>alloc::fmt::format (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="405" width="0.0158%" height="15" fill="rgb(213,79,30)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="389" width="0.0158%" height="15" fill="rgb(246,177,23)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="399.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="373" width="0.0158%" height="15" fill="rgb(230,62,27)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="357" width="0.0158%" height="15" fill="rgb(216,154,8)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="341" width="0.0158%" height="15" fill="rgb(244,35,45)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="325" width="0.0158%" height="15" fill="rgb(251,115,12)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="335.50"></text></g><g><title>core::fmt::write (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="309" width="0.0158%" height="15" fill="rgb(240,54,50)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="293" width="0.0158%" height="15" fill="rgb(233,84,52)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="303.50"></text></g><g><title>&lt;&amp;T as core::fmt::Binary&gt;::fmt (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="277" width="0.0158%" height="15" fill="rgb(207,117,47)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="287.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::Binary for i8&gt;::fmt (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="261" width="0.0158%" height="15" fill="rgb(249,43,39)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="271.50"></text></g><g><title>core::fmt::num::GenericRadix::fmt_int (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="245" width="0.0158%" height="15" fill="rgb(209,38,44)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="229" width="0.0158%" height="15" fill="rgb(236,212,23)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="239.50"></text></g><g><title>alloc::string::String::push_str (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="213" width="0.0158%" height="15" fill="rgb(242,79,21)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="197" width="0.0158%" height="15" fill="rgb(211,96,35)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="181" width="0.0158%" height="15" fill="rgb(253,215,40)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="165" width="0.0158%" height="15" fill="rgb(211,81,21)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="149" width="0.0158%" height="15" fill="rgb(208,190,38)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="133" width="0.0158%" height="15" fill="rgb(235,213,38)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="117" width="0.0158%" height="15" fill="rgb(237,122,38)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="101" width="0.0158%" height="15" fill="rgb(244,218,35)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="85" width="0.0158%" height="15" fill="rgb(240,68,47)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="69" width="0.0158%" height="15" fill="rgb(210,16,53)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="79.50"></text></g><g><title>malloc (1,007,856 samples, 0.02%)</title><rect x="0.1904%" y="53" width="0.0158%" height="15" fill="rgb(235,124,12)" fg:x="12148609" fg:w="1007856"/><text x="0.4404%" y="63.50"></text></g><g><title>test_huffmandat (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="885" width="0.0322%" height="15" fill="rgb(224,169,11)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="895.50"></text></g><g><title>__GI___clone3 (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="869" width="0.0322%" height="15" fill="rgb(250,166,2)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="879.50"></text></g><g><title>start_thread (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="853" width="0.0322%" height="15" fill="rgb(242,216,29)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="863.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="837" width="0.0322%" height="15" fill="rgb(230,116,27)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="821" width="0.0322%" height="15" fill="rgb(228,99,48)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="805" width="0.0322%" height="15" fill="rgb(253,11,6)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="789" width="0.0322%" height="15" fill="rgb(247,143,39)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="773" width="0.0322%" height="15" fill="rgb(236,97,10)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="783.50"></text></g><g><title>std::panic::catch_unwind (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="757" width="0.0322%" height="15" fill="rgb(233,208,19)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="767.50"></text></g><g><title>std::panicking::try (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="741" width="0.0322%" height="15" fill="rgb(216,164,2)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="751.50"></text></g><g><title>std::panicking::try::do_call (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="725" width="0.0322%" height="15" fill="rgb(220,129,5)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="709" width="0.0322%" height="15" fill="rgb(242,17,10)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="719.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="693" width="0.0322%" height="15" fill="rgb(242,107,0)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="703.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="677" width="0.0322%" height="15" fill="rgb(251,28,31)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="687.50"></text></g><g><title>test::run_test::_{{closure}} (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="661" width="0.0322%" height="15" fill="rgb(233,223,10)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="671.50"></text></g><g><title>test::run_test::_{{closure}} (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="645" width="0.0322%" height="15" fill="rgb(215,21,27)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="655.50"></text></g><g><title>test::run_test_in_process (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="629" width="0.0322%" height="15" fill="rgb(232,23,21)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="639.50"></text></g><g><title>std::panic::catch_unwind (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="613" width="0.0322%" height="15" fill="rgb(244,5,23)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="623.50"></text></g><g><title>std::panicking::try (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="597" width="0.0322%" height="15" fill="rgb(226,81,46)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="607.50"></text></g><g><title>std::panicking::try::do_call (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="581" width="0.0322%" height="15" fill="rgb(247,70,30)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="565" width="0.0322%" height="15" fill="rgb(212,68,19)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="575.50"></text></g><g><title>test::run_test_in_process::_{{closure}} (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="549" width="0.0322%" height="15" fill="rgb(240,187,13)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="559.50"></text></g><g><title>test::types::RunnableTest::run (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="533" width="0.0322%" height="15" fill="rgb(223,113,26)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="543.50"></text></g><g><title>test::__rust_begin_short_backtrace (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="517" width="0.0322%" height="15" fill="rgb(206,192,2)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="501" width="0.0322%" height="15" fill="rgb(241,108,4)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,052,141 samples, 0.03%)</title><rect x="0.1904%" y="485" width="0.0322%" height="15" fill="rgb(247,173,49)" fg:x="12148609" fg:w="2052141"/><text x="0.4404%" y="495.50"></text></g><g><title>tests::test_huffmandata_encode::_{{closure}} (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="469" width="0.0164%" height="15" fill="rgb(224,114,35)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="479.50"></text></g><g><title>tests::test_huffmandata_encode (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="453" width="0.0164%" height="15" fill="rgb(245,159,27)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="437" width="0.0164%" height="15" fill="rgb(245,172,44)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="421" width="0.0164%" height="15" fill="rgb(236,23,11)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="405" width="0.0164%" height="15" fill="rgb(205,117,38)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="389" width="0.0164%" height="15" fill="rgb(237,72,25)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="373" width="0.0164%" height="15" fill="rgb(244,70,9)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="357" width="0.0164%" height="15" fill="rgb(217,125,39)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="341" width="0.0164%" height="15" fill="rgb(235,36,10)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="325" width="0.0164%" height="15" fill="rgb(251,123,47)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="309" width="0.0164%" height="15" fill="rgb(221,13,13)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="293" width="0.0164%" height="15" fill="rgb(238,131,9)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="277" width="0.0164%" height="15" fill="rgb(211,50,8)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="261" width="0.0164%" height="15" fill="rgb(245,182,24)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="271.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="245" width="0.0164%" height="15" fill="rgb(242,14,37)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="229" width="0.0164%" height="15" fill="rgb(246,228,12)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="213" width="0.0164%" height="15" fill="rgb(213,55,15)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="197" width="0.0164%" height="15" fill="rgb(209,9,3)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="207.50"></text></g><g><title>__rdl_alloc (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="181" width="0.0164%" height="15" fill="rgb(230,59,30)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="165" width="0.0164%" height="15" fill="rgb(209,121,21)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="175.50"></text></g><g><title>malloc (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="149" width="0.0164%" height="15" fill="rgb(220,109,13)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="159.50"></text></g><g><title>_int_malloc (1,044,285 samples, 0.02%)</title><rect x="0.2062%" y="133" width="0.0164%" height="15" fill="rgb(232,18,1)" fg:x="13156465" fg:w="1044285"/><text x="0.4562%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6,082,782 samples, 0.10%)</title><rect x="0.2225%" y="869" width="0.0953%" height="15" fill="rgb(215,41,42)" fg:x="14200750" fg:w="6082782"/><text x="0.4725%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21,980,194 samples, 0.34%)</title><rect x="0.3178%" y="869" width="0.3444%" height="15" fill="rgb(224,123,36)" fg:x="20283532" fg:w="21980194"/><text x="0.5678%" y="879.50"></text></g><g><title>&lt;&amp;T as core::fmt::Binary&gt;::fmt (6,143,763 samples, 0.10%)</title><rect x="0.6623%" y="853" width="0.0963%" height="15" fill="rgb(240,125,3)" fg:x="42263726" fg:w="6143763"/><text x="0.9123%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6,191,182 samples, 0.10%)</title><rect x="0.7586%" y="853" width="0.0970%" height="15" fill="rgb(205,98,50)" fg:x="48407489" fg:w="6191182"/><text x="1.0086%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::BitVector&gt;::from_string (3,099,955 samples, 0.05%)</title><rect x="0.8556%" y="853" width="0.0486%" height="15" fill="rgb(205,185,37)" fg:x="54598671" fg:w="3099955"/><text x="1.1056%" y="863.50"></text></g><g><title>_int_free (3,106,831 samples, 0.05%)</title><rect x="0.9042%" y="853" width="0.0487%" height="15" fill="rgb(238,207,15)" fg:x="57698626" fg:w="3106831"/><text x="1.1542%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12,528,039 samples, 0.20%)</title><rect x="0.9528%" y="853" width="0.1963%" height="15" fill="rgb(213,199,42)" fg:x="60805457" fg:w="12528039"/><text x="1.2028%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,135,996 samples, 0.05%)</title><rect x="1.1000%" y="837" width="0.0491%" height="15" fill="rgb(235,201,11)" fg:x="70197500" fg:w="3135996"/><text x="1.3500%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (9,186,633 samples, 0.14%)</title><rect x="1.1492%" y="853" width="0.1440%" height="15" fill="rgb(207,46,11)" fg:x="73333496" fg:w="9186633"/><text x="1.3992%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (37,183,423 samples, 0.58%)</title><rect x="1.2931%" y="853" width="0.5827%" height="15" fill="rgb(241,35,35)" fg:x="82520129" fg:w="37183423"/><text x="1.5431%" y="863.50"></text></g><g><title>cfree@GLIBC_2.2.5 (44,955,449 samples, 0.70%)</title><rect x="1.8758%" y="853" width="0.7045%" height="15" fill="rgb(243,32,47)" fg:x="119703552" fg:w="44955449"/><text x="2.1258%" y="863.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (3,040,498 samples, 0.05%)</title><rect x="2.5802%" y="853" width="0.0476%" height="15" fill="rgb(247,202,23)" fg:x="164659001" fg:w="3040498"/><text x="2.8302%" y="863.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6,397,111 samples, 0.10%)</title><rect x="3.3633%" y="789" width="0.1002%" height="15" fill="rgb(219,102,11)" fg:x="214630137" fg:w="6397111"/><text x="3.6133%" y="799.50"></text></g><g><title>core::hash::Hasher::write_usize (6,397,111 samples, 0.10%)</title><rect x="3.3633%" y="773" width="0.1002%" height="15" fill="rgb(243,110,44)" fg:x="214630137" fg:w="6397111"/><text x="3.6133%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,397,111 samples, 0.10%)</title><rect x="3.3633%" y="757" width="0.1002%" height="15" fill="rgb(222,74,54)" fg:x="214630137" fg:w="6397111"/><text x="3.6133%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6,397,111 samples, 0.10%)</title><rect x="3.3633%" y="741" width="0.1002%" height="15" fill="rgb(216,99,12)" fg:x="214630137" fg:w="6397111"/><text x="3.6133%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (84,585,543 samples, 1.33%)</title><rect x="2.6279%" y="853" width="1.3255%" height="15" fill="rgb(226,22,26)" fg:x="167699499" fg:w="84585543"/><text x="2.8779%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (37,654,905 samples, 0.59%)</title><rect x="3.3633%" y="837" width="0.5901%" height="15" fill="rgb(217,163,10)" fg:x="214630137" fg:w="37654905"/><text x="3.6133%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (37,654,905 samples, 0.59%)</title><rect x="3.3633%" y="821" width="0.5901%" height="15" fill="rgb(213,25,53)" fg:x="214630137" fg:w="37654905"/><text x="3.6133%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (37,654,905 samples, 0.59%)</title><rect x="3.3633%" y="805" width="0.5901%" height="15" fill="rgb(252,105,26)" fg:x="214630137" fg:w="37654905"/><text x="3.6133%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (31,257,794 samples, 0.49%)</title><rect x="3.4636%" y="789" width="0.4898%" height="15" fill="rgb(220,39,43)" fg:x="221027248" fg:w="31257794"/><text x="3.7136%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (31,257,794 samples, 0.49%)</title><rect x="3.4636%" y="773" width="0.4898%" height="15" fill="rgb(229,68,48)" fg:x="221027248" fg:w="31257794"/><text x="3.7136%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (31,257,794 samples, 0.49%)</title><rect x="3.4636%" y="757" width="0.4898%" height="15" fill="rgb(252,8,32)" fg:x="221027248" fg:w="31257794"/><text x="3.7136%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="853" width="0.0397%" height="15" fill="rgb(223,20,43)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="863.50"></text></g><g><title>tests::test_large_payload_1000_000::_{{closure}} (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="837" width="0.0397%" height="15" fill="rgb(229,81,49)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="847.50"></text></g><g><title>tests::test_large_payload_1000_000 (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="821" width="0.0397%" height="15" fill="rgb(236,28,36)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="805" width="0.0397%" height="15" fill="rgb(249,185,26)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="789" width="0.0397%" height="15" fill="rgb(249,174,33)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="773" width="0.0397%" height="15" fill="rgb(233,201,37)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="783.50"></text></g><g><title>alloc::alloc::alloc (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="757" width="0.0397%" height="15" fill="rgb(221,78,26)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="767.50"></text></g><g><title>__rdl_alloc (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="741" width="0.0397%" height="15" fill="rgb(250,127,30)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="751.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,531,775 samples, 0.04%)</title><rect x="3.9534%" y="725" width="0.0397%" height="15" fill="rgb(230,49,44)" fg:x="252285042" fg:w="2531775"/><text x="4.2034%" y="735.50"></text></g><g><title>[anon] (246,794,150 samples, 3.87%)</title><rect x="0.6623%" y="869" width="3.8673%" height="15" fill="rgb(229,67,23)" fg:x="42263726" fg:w="246794150"/><text x="0.9123%" y="879.50">[ano..</text></g><g><title>malloc (34,241,059 samples, 0.54%)</title><rect x="3.9930%" y="853" width="0.5366%" height="15" fill="rgb(249,83,47)" fg:x="254816817" fg:w="34241059"/><text x="4.2430%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (3,074,932 samples, 0.05%)</title><rect x="4.5296%" y="853" width="0.0482%" height="15" fill="rgb(215,43,3)" fg:x="289057876" fg:w="3074932"/><text x="4.7796%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (3,074,932 samples, 0.05%)</title><rect x="4.5296%" y="837" width="0.0482%" height="15" fill="rgb(238,154,13)" fg:x="289057876" fg:w="3074932"/><text x="4.7796%" y="847.50"></text></g><g><title>alloc::string::String::reserve (3,074,932 samples, 0.05%)</title><rect x="4.5296%" y="821" width="0.0482%" height="15" fill="rgb(219,56,2)" fg:x="289057876" fg:w="3074932"/><text x="4.7796%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,074,932 samples, 0.05%)</title><rect x="4.5296%" y="805" width="0.0482%" height="15" fill="rgb(233,0,4)" fg:x="289057876" fg:w="3074932"/><text x="4.7796%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,074,932 samples, 0.05%)</title><rect x="4.5296%" y="789" width="0.0482%" height="15" fill="rgb(235,30,7)" fg:x="289057876" fg:w="3074932"/><text x="4.7796%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,074,932 samples, 0.05%)</title><rect x="4.5296%" y="773" width="0.0482%" height="15" fill="rgb(250,79,13)" fg:x="289057876" fg:w="3074932"/><text x="4.7796%" y="783.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6,244,725 samples, 0.10%)</title><rect x="4.5778%" y="853" width="0.0979%" height="15" fill="rgb(211,146,34)" fg:x="292132808" fg:w="6244725"/><text x="4.8278%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2,967,428 samples, 0.05%)</title><rect x="4.6757%" y="821" width="0.0465%" height="15" fill="rgb(228,22,38)" fg:x="298377533" fg:w="2967428"/><text x="4.9257%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,967,428 samples, 0.05%)</title><rect x="4.6757%" y="805" width="0.0465%" height="15" fill="rgb(235,168,5)" fg:x="298377533" fg:w="2967428"/><text x="4.9257%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,967,428 samples, 0.05%)</title><rect x="4.6757%" y="789" width="0.0465%" height="15" fill="rgb(221,155,16)" fg:x="298377533" fg:w="2967428"/><text x="4.9257%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,967,428 samples, 0.05%)</title><rect x="4.6757%" y="773" width="0.0465%" height="15" fill="rgb(215,215,53)" fg:x="298377533" fg:w="2967428"/><text x="4.9257%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::Padded&gt;::from_vec_u8 (5,889,294 samples, 0.09%)</title><rect x="4.6757%" y="837" width="0.0923%" height="15" fill="rgb(223,4,10)" fg:x="298377533" fg:w="5889294"/><text x="4.9257%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="821" width="0.0458%" height="15" fill="rgb(234,103,6)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="805" width="0.0458%" height="15" fill="rgb(227,97,0)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="789" width="0.0458%" height="15" fill="rgb(234,150,53)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="773" width="0.0458%" height="15" fill="rgb(228,201,54)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="757" width="0.0458%" height="15" fill="rgb(222,22,37)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="741" width="0.0458%" height="15" fill="rgb(237,53,32)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="725" width="0.0458%" height="15" fill="rgb(233,25,53)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="735.50"></text></g><g><title>__rdl_dealloc (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="709" width="0.0458%" height="15" fill="rgb(210,40,34)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="719.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,921,866 samples, 0.05%)</title><rect x="4.7222%" y="693" width="0.0458%" height="15" fill="rgb(241,220,44)" fg:x="301344961" fg:w="2921866"/><text x="4.9722%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6,182,031 samples, 0.10%)</title><rect x="4.7679%" y="821" width="0.0969%" height="15" fill="rgb(235,28,35)" fg:x="304266827" fg:w="6182031"/><text x="5.0179%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,308,277 samples, 0.10%)</title><rect x="4.8648%" y="821" width="0.0989%" height="15" fill="rgb(210,56,17)" fg:x="310448858" fg:w="6308277"/><text x="5.1148%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,308,277 samples, 0.10%)</title><rect x="4.8648%" y="805" width="0.0989%" height="15" fill="rgb(224,130,29)" fg:x="310448858" fg:w="6308277"/><text x="5.1148%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,308,277 samples, 0.10%)</title><rect x="4.8648%" y="789" width="0.0989%" height="15" fill="rgb(235,212,8)" fg:x="310448858" fg:w="6308277"/><text x="5.1148%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,308,277 samples, 0.10%)</title><rect x="4.8648%" y="773" width="0.0989%" height="15" fill="rgb(223,33,50)" fg:x="310448858" fg:w="6308277"/><text x="5.1148%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,308,277 samples, 0.10%)</title><rect x="4.8648%" y="757" width="0.0989%" height="15" fill="rgb(219,149,13)" fg:x="310448858" fg:w="6308277"/><text x="5.1148%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (6,308,277 samples, 0.10%)</title><rect x="4.8648%" y="741" width="0.0989%" height="15" fill="rgb(250,156,29)" fg:x="310448858" fg:w="6308277"/><text x="5.1148%" y="751.50"></text></g><g><title>__rdl_dealloc (6,308,277 samples, 0.10%)</title><rect x="4.8648%" y="725" width="0.0989%" height="15" fill="rgb(216,193,19)" fg:x="310448858" fg:w="6308277"/><text x="5.1148%" y="735.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,308,277 samples, 0.10%)</title><rect x="4.8648%" y="709" width="0.0989%" height="15" fill="rgb(216,135,14)" fg:x="310448858" fg:w="6308277"/><text x="5.1148%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (3,177,700 samples, 0.05%)</title><rect x="4.9637%" y="757" width="0.0498%" height="15" fill="rgb(241,47,5)" fg:x="316757135" fg:w="3177700"/><text x="5.2137%" y="767.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::decode (24,633,713 samples, 0.39%)</title><rect x="4.6757%" y="853" width="0.3860%" height="15" fill="rgb(233,42,35)" fg:x="298377533" fg:w="24633713"/><text x="4.9257%" y="863.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::huffman_decode (18,744,419 samples, 0.29%)</title><rect x="4.7679%" y="837" width="0.2937%" height="15" fill="rgb(231,13,6)" fg:x="304266827" fg:w="18744419"/><text x="5.0179%" y="847.50"></text></g><g><title>huff_tree_tap::encoding_map::EncodingMap::get_inverse (6,254,111 samples, 0.10%)</title><rect x="4.9637%" y="821" width="0.0980%" height="15" fill="rgb(207,181,40)" fg:x="316757135" fg:w="6254111"/><text x="5.2137%" y="831.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,254,111 samples, 0.10%)</title><rect x="4.9637%" y="805" width="0.0980%" height="15" fill="rgb(254,173,49)" fg:x="316757135" fg:w="6254111"/><text x="5.2137%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,254,111 samples, 0.10%)</title><rect x="4.9637%" y="789" width="0.0980%" height="15" fill="rgb(221,1,38)" fg:x="316757135" fg:w="6254111"/><text x="5.2137%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,254,111 samples, 0.10%)</title><rect x="4.9637%" y="773" width="0.0980%" height="15" fill="rgb(206,124,46)" fg:x="316757135" fg:w="6254111"/><text x="5.2137%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="757" width="0.0482%" height="15" fill="rgb(249,21,11)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="741" width="0.0482%" height="15" fill="rgb(222,201,40)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="725" width="0.0482%" height="15" fill="rgb(235,61,29)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="709" width="0.0482%" height="15" fill="rgb(219,207,3)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="719.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="693" width="0.0482%" height="15" fill="rgb(222,56,46)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="703.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="677" width="0.0482%" height="15" fill="rgb(239,76,54)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="661" width="0.0482%" height="15" fill="rgb(231,124,27)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="671.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="645" width="0.0482%" height="15" fill="rgb(249,195,6)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="629" width="0.0482%" height="15" fill="rgb(237,174,47)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,076,411 samples, 0.05%)</title><rect x="5.0135%" y="613" width="0.0482%" height="15" fill="rgb(206,201,31)" fg:x="319934835" fg:w="3076411"/><text x="5.2635%" y="623.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::new (12,048,821 samples, 0.19%)</title><rect x="5.0617%" y="853" width="0.1888%" height="15" fill="rgb(231,57,52)" fg:x="323011246" fg:w="12048821"/><text x="5.3117%" y="863.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::huffman_encode (12,048,821 samples, 0.19%)</title><rect x="5.0617%" y="837" width="0.1888%" height="15" fill="rgb(248,177,22)" fg:x="323011246" fg:w="12048821"/><text x="5.3117%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12,048,821 samples, 0.19%)</title><rect x="5.0617%" y="821" width="0.1888%" height="15" fill="rgb(215,211,37)" fg:x="323011246" fg:w="12048821"/><text x="5.3117%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12,048,821 samples, 0.19%)</title><rect x="5.0617%" y="805" width="0.1888%" height="15" fill="rgb(241,128,51)" fg:x="323011246" fg:w="12048821"/><text x="5.3117%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (12,048,821 samples, 0.19%)</title><rect x="5.0617%" y="789" width="0.1888%" height="15" fill="rgb(227,165,31)" fg:x="323011246" fg:w="12048821"/><text x="5.3117%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12,048,821 samples, 0.19%)</title><rect x="5.0617%" y="773" width="0.1888%" height="15" fill="rgb(228,167,24)" fg:x="323011246" fg:w="12048821"/><text x="5.3117%" y="783.50"></text></g><g><title>[libc.so.6] (49,137,052 samples, 0.77%)</title><rect x="4.5296%" y="869" width="0.7700%" height="15" fill="rgb(228,143,12)" fg:x="289057876" fg:w="49137052"/><text x="4.7796%" y="879.50"></text></g><g><title>malloc (3,134,861 samples, 0.05%)</title><rect x="5.2505%" y="853" width="0.0491%" height="15" fill="rgb(249,149,8)" fg:x="335060067" fg:w="3134861"/><text x="5.5005%" y="863.50"></text></g><g><title>&lt;&amp;T as core::fmt::Binary&gt;::fmt (12,337,031 samples, 0.19%)</title><rect x="5.2996%" y="853" width="0.1933%" height="15" fill="rgb(243,35,44)" fg:x="338194928" fg:w="12337031"/><text x="5.5496%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::BitVector&gt;::from_string (3,127,392 samples, 0.05%)</title><rect x="5.4929%" y="853" width="0.0490%" height="15" fill="rgb(246,89,9)" fg:x="350531959" fg:w="3127392"/><text x="5.7429%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (27,605,133 samples, 0.43%)</title><rect x="5.5419%" y="853" width="0.4326%" height="15" fill="rgb(233,213,13)" fg:x="353659351" fg:w="27605133"/><text x="5.7919%" y="863.50"></text></g><g><title>_int_free (40,676,161 samples, 0.64%)</title><rect x="5.9745%" y="853" width="0.6374%" height="15" fill="rgb(233,141,41)" fg:x="381264484" fg:w="40676161"/><text x="6.2245%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6,325,554 samples, 0.10%)</title><rect x="6.6119%" y="853" width="0.0991%" height="15" fill="rgb(239,167,4)" fg:x="421940645" fg:w="6325554"/><text x="6.8619%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (6,325,554 samples, 0.10%)</title><rect x="6.6119%" y="837" width="0.0991%" height="15" fill="rgb(209,217,16)" fg:x="421940645" fg:w="6325554"/><text x="6.8619%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (49,867,213 samples, 0.78%)</title><rect x="6.7110%" y="853" width="0.7814%" height="15" fill="rgb(219,88,35)" fg:x="428266199" fg:w="49867213"/><text x="6.9610%" y="863.50"></text></g><g><title>cfree@GLIBC_2.2.5 (40,071,861 samples, 0.63%)</title><rect x="7.4925%" y="853" width="0.6279%" height="15" fill="rgb(220,193,23)" fg:x="478133412" fg:w="40071861"/><text x="7.7425%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15,875,495 samples, 0.25%)</title><rect x="8.1204%" y="853" width="0.2488%" height="15" fill="rgb(230,90,52)" fg:x="518205273" fg:w="15875495"/><text x="8.3704%" y="863.50"></text></g><g><title>[unknown] (268,321,748 samples, 4.20%)</title><rect x="5.2996%" y="869" width="4.2047%" height="15" fill="rgb(252,106,19)" fg:x="338194928" fg:w="268321748"/><text x="5.5496%" y="879.50">[unkn..</text></g><g><title>malloc (72,435,908 samples, 1.14%)</title><rect x="8.3692%" y="853" width="1.1351%" height="15" fill="rgb(206,74,20)" fg:x="534080768" fg:w="72435908"/><text x="8.6192%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::Padded&gt;::from_vec_u8 (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="405" width="0.0496%" height="15" fill="rgb(230,138,44)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="389" width="0.0496%" height="15" fill="rgb(235,182,43)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="373" width="0.0496%" height="15" fill="rgb(242,16,51)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="357" width="0.0496%" height="15" fill="rgb(248,9,4)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="341" width="0.0496%" height="15" fill="rgb(210,31,22)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="325" width="0.0496%" height="15" fill="rgb(239,54,39)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="309" width="0.0496%" height="15" fill="rgb(230,99,41)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="319.50"></text></g><g><title>__rdl_dealloc (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="293" width="0.0496%" height="15" fill="rgb(253,106,12)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,163,898 samples, 0.05%)</title><rect x="9.5874%" y="277" width="0.0496%" height="15" fill="rgb(213,46,41)" fg:x="611819497" fg:w="3163898"/><text x="9.8374%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::Padded&gt;::unpad (3,055,325 samples, 0.05%)</title><rect x="9.6369%" y="405" width="0.0479%" height="15" fill="rgb(215,133,35)" fg:x="614983395" fg:w="3055325"/><text x="9.8869%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,055,325 samples, 0.05%)</title><rect x="9.6369%" y="389" width="0.0479%" height="15" fill="rgb(213,28,5)" fg:x="614983395" fg:w="3055325"/><text x="9.8869%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,055,325 samples, 0.05%)</title><rect x="9.6369%" y="373" width="0.0479%" height="15" fill="rgb(215,77,49)" fg:x="614983395" fg:w="3055325"/><text x="9.8869%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,055,325 samples, 0.05%)</title><rect x="9.6369%" y="357" width="0.0479%" height="15" fill="rgb(248,100,22)" fg:x="614983395" fg:w="3055325"/><text x="9.8869%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,055,325 samples, 0.05%)</title><rect x="9.6369%" y="341" width="0.0479%" height="15" fill="rgb(208,67,9)" fg:x="614983395" fg:w="3055325"/><text x="9.8869%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,155,245 samples, 0.05%)</title><rect x="9.6848%" y="389" width="0.0494%" height="15" fill="rgb(219,133,21)" fg:x="618038720" fg:w="3155245"/><text x="9.9348%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,146,692 samples, 0.05%)</title><rect x="9.7343%" y="389" width="0.0493%" height="15" fill="rgb(246,46,29)" fg:x="621193965" fg:w="3146692"/><text x="9.9843%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,146,692 samples, 0.05%)</title><rect x="9.7343%" y="373" width="0.0493%" height="15" fill="rgb(246,185,52)" fg:x="621193965" fg:w="3146692"/><text x="9.9843%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,146,692 samples, 0.05%)</title><rect x="9.7343%" y="357" width="0.0493%" height="15" fill="rgb(252,136,11)" fg:x="621193965" fg:w="3146692"/><text x="9.9843%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,146,692 samples, 0.05%)</title><rect x="9.7343%" y="341" width="0.0493%" height="15" fill="rgb(219,138,53)" fg:x="621193965" fg:w="3146692"/><text x="9.9843%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,146,692 samples, 0.05%)</title><rect x="9.7343%" y="325" width="0.0493%" height="15" fill="rgb(211,51,23)" fg:x="621193965" fg:w="3146692"/><text x="9.9843%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (3,146,692 samples, 0.05%)</title><rect x="9.7343%" y="309" width="0.0493%" height="15" fill="rgb(247,221,28)" fg:x="621193965" fg:w="3146692"/><text x="9.9843%" y="319.50"></text></g><g><title>__rdl_dealloc (3,146,692 samples, 0.05%)</title><rect x="9.7343%" y="293" width="0.0493%" height="15" fill="rgb(251,222,45)" fg:x="621193965" fg:w="3146692"/><text x="9.9843%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,146,692 samples, 0.05%)</title><rect x="9.7343%" y="277" width="0.0493%" height="15" fill="rgb(217,162,53)" fg:x="621193965" fg:w="3146692"/><text x="9.9843%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (9,446,903 samples, 0.15%)</title><rect x="9.7836%" y="325" width="0.1480%" height="15" fill="rgb(229,93,14)" fg:x="624340657" fg:w="9446903"/><text x="10.0336%" y="335.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::decode (28,343,079 samples, 0.44%)</title><rect x="9.5874%" y="421" width="0.4441%" height="15" fill="rgb(209,67,49)" fg:x="611819497" fg:w="28343079"/><text x="9.8374%" y="431.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::huffman_decode (22,123,856 samples, 0.35%)</title><rect x="9.6848%" y="405" width="0.3467%" height="15" fill="rgb(213,87,29)" fg:x="618038720" fg:w="22123856"/><text x="9.9348%" y="415.50"></text></g><g><title>huff_tree_tap::encoding_map::EncodingMap::get_inverse (15,821,919 samples, 0.25%)</title><rect x="9.7836%" y="389" width="0.2479%" height="15" fill="rgb(205,151,52)" fg:x="624340657" fg:w="15821919"/><text x="10.0336%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (15,821,919 samples, 0.25%)</title><rect x="9.7836%" y="373" width="0.2479%" height="15" fill="rgb(253,215,39)" fg:x="624340657" fg:w="15821919"/><text x="10.0336%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (15,821,919 samples, 0.25%)</title><rect x="9.7836%" y="357" width="0.2479%" height="15" fill="rgb(221,220,41)" fg:x="624340657" fg:w="15821919"/><text x="10.0336%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (15,821,919 samples, 0.25%)</title><rect x="9.7836%" y="341" width="0.2479%" height="15" fill="rgb(218,133,21)" fg:x="624340657" fg:w="15821919"/><text x="10.0336%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="325" width="0.0999%" height="15" fill="rgb(221,193,43)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="309" width="0.0999%" height="15" fill="rgb(240,128,52)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="293" width="0.0999%" height="15" fill="rgb(253,114,12)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="277" width="0.0999%" height="15" fill="rgb(215,223,47)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="261" width="0.0999%" height="15" fill="rgb(248,225,23)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="245" width="0.0999%" height="15" fill="rgb(250,108,0)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="229" width="0.0999%" height="15" fill="rgb(228,208,7)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="239.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="213" width="0.0999%" height="15" fill="rgb(244,45,10)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="197" width="0.0999%" height="15" fill="rgb(207,125,25)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,375,016 samples, 0.10%)</title><rect x="9.9316%" y="181" width="0.0999%" height="15" fill="rgb(210,195,18)" fg:x="633787560" fg:w="6375016"/><text x="10.1816%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::BitVector&gt;::to_string (3,182,085 samples, 0.05%)</title><rect x="10.0315%" y="373" width="0.0499%" height="15" fill="rgb(249,80,12)" fg:x="640162576" fg:w="3182085"/><text x="10.2815%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,182,085 samples, 0.05%)</title><rect x="10.0315%" y="357" width="0.0499%" height="15" fill="rgb(221,65,9)" fg:x="640162576" fg:w="3182085"/><text x="10.2815%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::Padded&gt;::to_vec_u8 (6,277,765 samples, 0.10%)</title><rect x="10.0315%" y="405" width="0.0984%" height="15" fill="rgb(235,49,36)" fg:x="640162576" fg:w="6277765"/><text x="10.2815%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::ToByte&gt;::to_byte (6,277,765 samples, 0.10%)</title><rect x="10.0315%" y="389" width="0.0984%" height="15" fill="rgb(225,32,20)" fg:x="640162576" fg:w="6277765"/><text x="10.2815%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="373" width="0.0485%" height="15" fill="rgb(215,141,46)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="357" width="0.0485%" height="15" fill="rgb(250,160,47)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="341" width="0.0485%" height="15" fill="rgb(216,222,40)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="325" width="0.0485%" height="15" fill="rgb(234,217,39)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="309" width="0.0485%" height="15" fill="rgb(207,178,40)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="293" width="0.0485%" height="15" fill="rgb(221,136,13)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="277" width="0.0485%" height="15" fill="rgb(249,199,10)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="287.50"></text></g><g><title>__rdl_dealloc (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="261" width="0.0485%" height="15" fill="rgb(249,222,13)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,095,680 samples, 0.05%)</title><rect x="10.0814%" y="245" width="0.0485%" height="15" fill="rgb(244,185,38)" fg:x="643344661" fg:w="3095680"/><text x="10.3314%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;u8,i64&gt; as huff_tree_tap::frequency_map::FrequencyMapping&gt;::build (18,380,604 samples, 0.29%)</title><rect x="10.1299%" y="405" width="0.2880%" height="15" fill="rgb(236,202,9)" fg:x="646440341" fg:w="18380604"/><text x="10.3799%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (18,380,604 samples, 0.29%)</title><rect x="10.1299%" y="389" width="0.2880%" height="15" fill="rgb(250,229,37)" fg:x="646440341" fg:w="18380604"/><text x="10.3799%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (18,380,604 samples, 0.29%)</title><rect x="10.1299%" y="373" width="0.2880%" height="15" fill="rgb(206,174,23)" fg:x="646440341" fg:w="18380604"/><text x="10.3799%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (18,380,604 samples, 0.29%)</title><rect x="10.1299%" y="357" width="0.2880%" height="15" fill="rgb(211,33,43)" fg:x="646440341" fg:w="18380604"/><text x="10.3799%" y="367.50"></text></g><g><title>[libc.so.6] (56,012,672 samples, 0.88%)</title><rect x="9.5874%" y="437" width="0.8777%" height="15" fill="rgb(245,58,50)" fg:x="611819497" fg:w="56012672"/><text x="9.8374%" y="447.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::new (27,669,593 samples, 0.43%)</title><rect x="10.0315%" y="421" width="0.4336%" height="15" fill="rgb(244,68,36)" fg:x="640162576" fg:w="27669593"/><text x="10.2815%" y="431.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::huffman_encode (3,011,224 samples, 0.05%)</title><rect x="10.4179%" y="405" width="0.0472%" height="15" fill="rgb(232,229,15)" fg:x="664820945" fg:w="3011224"/><text x="10.6679%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,011,224 samples, 0.05%)</title><rect x="10.4179%" y="389" width="0.0472%" height="15" fill="rgb(254,30,23)" fg:x="664820945" fg:w="3011224"/><text x="10.6679%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,011,224 samples, 0.05%)</title><rect x="10.4179%" y="373" width="0.0472%" height="15" fill="rgb(235,160,14)" fg:x="664820945" fg:w="3011224"/><text x="10.6679%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,011,224 samples, 0.05%)</title><rect x="10.4179%" y="357" width="0.0472%" height="15" fill="rgb(212,155,44)" fg:x="664820945" fg:w="3011224"/><text x="10.6679%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,011,224 samples, 0.05%)</title><rect x="10.4179%" y="341" width="0.0472%" height="15" fill="rgb(226,2,50)" fg:x="664820945" fg:w="3011224"/><text x="10.6679%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (11,730,457 samples, 0.18%)</title><rect x="10.4651%" y="437" width="0.1838%" height="15" fill="rgb(234,177,6)" fg:x="667832169" fg:w="11730457"/><text x="10.7151%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11,730,457 samples, 0.18%)</title><rect x="10.4651%" y="421" width="0.1838%" height="15" fill="rgb(217,24,9)" fg:x="667832169" fg:w="11730457"/><text x="10.7151%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,730,457 samples, 0.18%)</title><rect x="10.4651%" y="405" width="0.1838%" height="15" fill="rgb(220,13,46)" fg:x="667832169" fg:w="11730457"/><text x="10.7151%" y="415.50"></text></g><g><title>alloc::alloc::alloc (11,730,457 samples, 0.18%)</title><rect x="10.4651%" y="389" width="0.1838%" height="15" fill="rgb(239,221,27)" fg:x="667832169" fg:w="11730457"/><text x="10.7151%" y="399.50"></text></g><g><title>__rdl_alloc (11,730,457 samples, 0.18%)</title><rect x="10.4651%" y="373" width="0.1838%" height="15" fill="rgb(222,198,25)" fg:x="667832169" fg:w="11730457"/><text x="10.7151%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11,730,457 samples, 0.18%)</title><rect x="10.4651%" y="357" width="0.1838%" height="15" fill="rgb(211,99,13)" fg:x="667832169" fg:w="11730457"/><text x="10.7151%" y="367.50"></text></g><g><title>malloc (11,730,457 samples, 0.18%)</title><rect x="10.4651%" y="341" width="0.1838%" height="15" fill="rgb(232,111,31)" fg:x="667832169" fg:w="11730457"/><text x="10.7151%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (2,976,049 samples, 0.05%)</title><rect x="10.6489%" y="437" width="0.0466%" height="15" fill="rgb(245,82,37)" fg:x="679562626" fg:w="2976049"/><text x="10.8989%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,976,049 samples, 0.05%)</title><rect x="10.6489%" y="421" width="0.0466%" height="15" fill="rgb(227,149,46)" fg:x="679562626" fg:w="2976049"/><text x="10.8989%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,686,057 samples, 0.04%)</title><rect x="10.6535%" y="405" width="0.0421%" height="15" fill="rgb(218,36,50)" fg:x="679852618" fg:w="2686057"/><text x="10.9035%" y="415.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3,093,560 samples, 0.05%)</title><rect x="10.6956%" y="437" width="0.0485%" height="15" fill="rgb(226,80,48)" fg:x="682538675" fg:w="3093560"/><text x="10.9456%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (3,093,560 samples, 0.05%)</title><rect x="10.6956%" y="421" width="0.0485%" height="15" fill="rgb(238,224,15)" fg:x="682538675" fg:w="3093560"/><text x="10.9456%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,093,560 samples, 0.05%)</title><rect x="10.6956%" y="405" width="0.0485%" height="15" fill="rgb(241,136,10)" fg:x="682538675" fg:w="3093560"/><text x="10.9456%" y="415.50"></text></g><g><title>__memcmp_avx2_movbe (3,093,560 samples, 0.05%)</title><rect x="10.6956%" y="389" width="0.0485%" height="15" fill="rgb(208,32,45)" fg:x="682538675" fg:w="3093560"/><text x="10.9456%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="437" width="0.2892%" height="15" fill="rgb(207,135,9)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="421" width="0.2892%" height="15" fill="rgb(206,86,44)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="405" width="0.2892%" height="15" fill="rgb(245,177,15)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="389" width="0.2892%" height="15" fill="rgb(206,64,50)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="373" width="0.2892%" height="15" fill="rgb(234,36,40)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="357" width="0.2892%" height="15" fill="rgb(213,64,8)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="367.50"></text></g><g><title>__rdl_dealloc (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="341" width="0.2892%" height="15" fill="rgb(210,75,36)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="325" width="0.2892%" height="15" fill="rgb(229,88,21)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (18,452,471 samples, 0.29%)</title><rect x="10.7440%" y="309" width="0.2892%" height="15" fill="rgb(252,204,47)" fg:x="685632235" fg:w="18452471"/><text x="10.9940%" y="319.50"></text></g><g><title>_int_free (7,579,443 samples, 0.12%)</title><rect x="10.9144%" y="293" width="0.1188%" height="15" fill="rgb(208,77,27)" fg:x="696505263" fg:w="7579443"/><text x="11.1644%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12,272,498 samples, 0.19%)</title><rect x="11.3229%" y="405" width="0.1923%" height="15" fill="rgb(221,76,26)" fg:x="722575214" fg:w="12272498"/><text x="11.5729%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (12,272,498 samples, 0.19%)</title><rect x="11.3229%" y="389" width="0.1923%" height="15" fill="rgb(225,139,18)" fg:x="722575214" fg:w="12272498"/><text x="11.5729%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3,034,823 samples, 0.05%)</title><rect x="11.4677%" y="373" width="0.0476%" height="15" fill="rgb(230,137,11)" fg:x="731812889" fg:w="3034823"/><text x="11.7177%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,034,823 samples, 0.05%)</title><rect x="11.4677%" y="357" width="0.0476%" height="15" fill="rgb(212,28,1)" fg:x="731812889" fg:w="3034823"/><text x="11.7177%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,034,823 samples, 0.05%)</title><rect x="11.4677%" y="341" width="0.0476%" height="15" fill="rgb(248,164,17)" fg:x="731812889" fg:w="3034823"/><text x="11.7177%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,034,823 samples, 0.05%)</title><rect x="11.4677%" y="325" width="0.0476%" height="15" fill="rgb(222,171,42)" fg:x="731812889" fg:w="3034823"/><text x="11.7177%" y="335.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (31,272,745 samples, 0.49%)</title><rect x="12.3864%" y="277" width="0.4901%" height="15" fill="rgb(243,84,45)" fg:x="790441540" fg:w="31272745"/><text x="12.6364%" y="287.50"></text></g><g><title>core::str::validations::next_code_point (31,272,745 samples, 0.49%)</title><rect x="12.3864%" y="261" width="0.4901%" height="15" fill="rgb(252,49,23)" fg:x="790441540" fg:w="31272745"/><text x="12.6364%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,272,745 samples, 0.49%)</title><rect x="12.3864%" y="245" width="0.4901%" height="15" fill="rgb(215,19,7)" fg:x="790441540" fg:w="31272745"/><text x="12.6364%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (24,860,338 samples, 0.39%)</title><rect x="12.4869%" y="229" width="0.3896%" height="15" fill="rgb(238,81,41)" fg:x="796853947" fg:w="24860338"/><text x="12.7369%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53,008,369 samples, 0.83%)</title><rect x="12.3864%" y="293" width="0.8307%" height="15" fill="rgb(210,199,37)" fg:x="790441540" fg:w="53008369"/><text x="12.6364%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21,735,624 samples, 0.34%)</title><rect x="12.8765%" y="277" width="0.3406%" height="15" fill="rgb(244,192,49)" fg:x="821714285" fg:w="21735624"/><text x="13.1265%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (21,735,624 samples, 0.34%)</title><rect x="12.8765%" y="261" width="0.3406%" height="15" fill="rgb(226,211,11)" fg:x="821714285" fg:w="21735624"/><text x="13.1265%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (21,735,624 samples, 0.34%)</title><rect x="12.8765%" y="245" width="0.3406%" height="15" fill="rgb(236,162,54)" fg:x="821714285" fg:w="21735624"/><text x="13.1265%" y="255.50"></text></g><g><title>&lt;u8 as huff_tree_tap::data::ToFromChar&gt;::from_char (21,735,624 samples, 0.34%)</title><rect x="12.8765%" y="229" width="0.3406%" height="15" fill="rgb(220,229,9)" fg:x="821714285" fg:w="21735624"/><text x="13.1265%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (87,086,836 samples, 1.36%)</title><rect x="11.9483%" y="325" width="1.3647%" height="15" fill="rgb(250,87,22)" fg:x="762484164" fg:w="87086836"/><text x="12.1983%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (87,086,836 samples, 1.36%)</title><rect x="11.9483%" y="309" width="1.3647%" height="15" fill="rgb(239,43,17)" fg:x="762484164" fg:w="87086836"/><text x="12.1983%" y="319.50"></text></g><g><title>core::ptr::write (6,121,091 samples, 0.10%)</title><rect x="13.2171%" y="293" width="0.0959%" height="15" fill="rgb(231,177,25)" fg:x="843449909" fg:w="6121091"/><text x="13.4671%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (6,101,385 samples, 0.10%)</title><rect x="13.3130%" y="309" width="0.0956%" height="15" fill="rgb(219,179,1)" fg:x="849571000" fg:w="6101385"/><text x="13.5630%" y="319.50"></text></g><g><title>core::str::validations::next_code_point (6,101,385 samples, 0.10%)</title><rect x="13.3130%" y="293" width="0.0956%" height="15" fill="rgb(238,219,53)" fg:x="849571000" fg:w="6101385"/><text x="13.5630%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12,541,137 samples, 0.20%)</title><rect x="13.3130%" y="325" width="0.1965%" height="15" fill="rgb(232,167,36)" fg:x="849571000" fg:w="12541137"/><text x="13.5630%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6,439,752 samples, 0.10%)</title><rect x="13.4086%" y="309" width="0.1009%" height="15" fill="rgb(244,19,51)" fg:x="855672385" fg:w="6439752"/><text x="13.6586%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6,439,752 samples, 0.10%)</title><rect x="13.4086%" y="293" width="0.1009%" height="15" fill="rgb(224,6,22)" fg:x="855672385" fg:w="6439752"/><text x="13.6586%" y="303.50"></text></g><g><title>core::ops::function::FnMut::call_mut (6,439,752 samples, 0.10%)</title><rect x="13.4086%" y="277" width="0.1009%" height="15" fill="rgb(224,145,5)" fg:x="855672385" fg:w="6439752"/><text x="13.6586%" y="287.50"></text></g><g><title>&lt;u8 as huff_tree_tap::data::ToFromChar&gt;::from_char (6,439,752 samples, 0.10%)</title><rect x="13.4086%" y="261" width="0.1009%" height="15" fill="rgb(234,130,49)" fg:x="855672385" fg:w="6439752"/><text x="13.6586%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43,237,766 samples, 0.68%)</title><rect x="13.5095%" y="325" width="0.6775%" height="15" fill="rgb(254,6,2)" fg:x="862112137" fg:w="43237766"/><text x="13.7595%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43,237,766 samples, 0.68%)</title><rect x="13.5095%" y="309" width="0.6775%" height="15" fill="rgb(208,96,46)" fg:x="862112137" fg:w="43237766"/><text x="13.7595%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43,237,766 samples, 0.68%)</title><rect x="13.5095%" y="293" width="0.6775%" height="15" fill="rgb(239,3,39)" fg:x="862112137" fg:w="43237766"/><text x="13.7595%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (43,237,766 samples, 0.68%)</title><rect x="13.5095%" y="277" width="0.6775%" height="15" fill="rgb(233,210,1)" fg:x="862112137" fg:w="43237766"/><text x="13.7595%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (43,237,766 samples, 0.68%)</title><rect x="13.5095%" y="261" width="0.6775%" height="15" fill="rgb(244,137,37)" fg:x="862112137" fg:w="43237766"/><text x="13.7595%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40,139,597 samples, 0.63%)</title><rect x="13.5581%" y="245" width="0.6290%" height="15" fill="rgb(240,136,2)" fg:x="865210306" fg:w="40139597"/><text x="13.8081%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40,139,597 samples, 0.63%)</title><rect x="13.5581%" y="229" width="0.6290%" height="15" fill="rgb(239,18,37)" fg:x="865210306" fg:w="40139597"/><text x="13.8081%" y="239.50"></text></g><g><title>alloc::alloc::alloc (40,139,597 samples, 0.63%)</title><rect x="13.5581%" y="213" width="0.6290%" height="15" fill="rgb(218,185,22)" fg:x="865210306" fg:w="40139597"/><text x="13.8081%" y="223.50"></text></g><g><title>__rdl_alloc (40,139,597 samples, 0.63%)</title><rect x="13.5581%" y="197" width="0.6290%" height="15" fill="rgb(225,218,4)" fg:x="865210306" fg:w="40139597"/><text x="13.8081%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (40,139,597 samples, 0.63%)</title><rect x="13.5581%" y="181" width="0.6290%" height="15" fill="rgb(230,182,32)" fg:x="865210306" fg:w="40139597"/><text x="13.8081%" y="191.50"></text></g><g><title>malloc (40,139,597 samples, 0.63%)</title><rect x="13.5581%" y="165" width="0.6290%" height="15" fill="rgb(242,56,43)" fg:x="865210306" fg:w="40139597"/><text x="13.8081%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::BitVector&gt;::from_string (176,621,784 samples, 2.77%)</title><rect x="11.5153%" y="405" width="2.7677%" height="15" fill="rgb(233,99,24)" fg:x="734847712" fg:w="176621784"/><text x="11.7653%" y="415.50">&lt;a..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (176,621,784 samples, 2.77%)</title><rect x="11.5153%" y="389" width="2.7677%" height="15" fill="rgb(234,209,42)" fg:x="734847712" fg:w="176621784"/><text x="11.7653%" y="399.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (176,621,784 samples, 2.77%)</title><rect x="11.5153%" y="373" width="2.7677%" height="15" fill="rgb(227,7,12)" fg:x="734847712" fg:w="176621784"/><text x="11.7653%" y="383.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (176,621,784 samples, 2.77%)</title><rect x="11.5153%" y="357" width="2.7677%" height="15" fill="rgb(245,203,43)" fg:x="734847712" fg:w="176621784"/><text x="11.7653%" y="367.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (176,621,784 samples, 2.77%)</title><rect x="11.5153%" y="341" width="2.7677%" height="15" fill="rgb(238,205,33)" fg:x="734847712" fg:w="176621784"/><text x="11.7653%" y="351.50">&lt;a..</text></g><g><title>core::ptr::write (6,119,593 samples, 0.10%)</title><rect x="14.1871%" y="325" width="0.0959%" height="15" fill="rgb(231,56,7)" fg:x="905349903" fg:w="6119593"/><text x="14.4371%" y="335.50"></text></g><g><title>alloc::string::String::with_capacity (15,110,410 samples, 0.24%)</title><rect x="14.7206%" y="341" width="0.2368%" height="15" fill="rgb(244,186,29)" fg:x="939399619" fg:w="15110410"/><text x="14.9706%" y="351.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (18,413,077 samples, 0.29%)</title><rect x="14.9574%" y="341" width="0.2885%" height="15" fill="rgb(234,111,31)" fg:x="954510029" fg:w="18413077"/><text x="15.2074%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (6,067,370 samples, 0.10%)</title><rect x="15.1509%" y="325" width="0.0951%" height="15" fill="rgb(241,149,10)" fg:x="966855736" fg:w="6067370"/><text x="15.4009%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (6,067,370 samples, 0.10%)</title><rect x="15.1509%" y="309" width="0.0951%" height="15" fill="rgb(249,206,44)" fg:x="966855736" fg:w="6067370"/><text x="15.4009%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,067,370 samples, 0.10%)</title><rect x="15.1509%" y="293" width="0.0951%" height="15" fill="rgb(251,153,30)" fg:x="966855736" fg:w="6067370"/><text x="15.4009%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,067,370 samples, 0.10%)</title><rect x="15.1509%" y="277" width="0.0951%" height="15" fill="rgb(239,152,38)" fg:x="966855736" fg:w="6067370"/><text x="15.4009%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,091,244 samples, 0.05%)</title><rect x="15.8760%" y="293" width="0.0484%" height="15" fill="rgb(249,139,47)" fg:x="1013128031" fg:w="3091244"/><text x="16.1260%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,091,244 samples, 0.05%)</title><rect x="15.8760%" y="277" width="0.0484%" height="15" fill="rgb(244,64,35)" fg:x="1013128031" fg:w="3091244"/><text x="16.1260%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,091,244 samples, 0.05%)</title><rect x="15.8760%" y="261" width="0.0484%" height="15" fill="rgb(216,46,15)" fg:x="1013128031" fg:w="3091244"/><text x="16.1260%" y="271.50"></text></g><g><title>core::fmt::Formatter::new (21,468,680 samples, 0.34%)</title><rect x="15.9244%" y="293" width="0.3364%" height="15" fill="rgb(250,74,19)" fg:x="1016219275" fg:w="21468680"/><text x="16.1744%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,098,749 samples, 0.05%)</title><rect x="17.5101%" y="149" width="0.0486%" height="15" fill="rgb(249,42,33)" fg:x="1117408518" fg:w="3098749"/><text x="17.7601%" y="159.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,072,154 samples, 0.05%)</title><rect x="17.9407%" y="69" width="0.0481%" height="15" fill="rgb(242,149,17)" fg:x="1144885474" fg:w="3072154"/><text x="18.1907%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (15,480,379 samples, 0.24%)</title><rect x="17.9888%" y="69" width="0.2426%" height="15" fill="rgb(244,29,21)" fg:x="1147957628" fg:w="15480379"/><text x="18.2388%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3,153,483 samples, 0.05%)</title><rect x="18.4668%" y="53" width="0.0494%" height="15" fill="rgb(220,130,37)" fg:x="1178463425" fg:w="3153483"/><text x="18.7168%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (82,218,703 samples, 1.29%)</title><rect x="18.2314%" y="69" width="1.2884%" height="15" fill="rgb(211,67,2)" fg:x="1163438007" fg:w="82218703"/><text x="18.4814%" y="79.50"></text></g><g><title>malloc (64,039,802 samples, 1.00%)</title><rect x="18.5162%" y="53" width="1.0035%" height="15" fill="rgb(235,68,52)" fg:x="1181616908" fg:w="64039802"/><text x="18.7662%" y="63.50"></text></g><g><title>core::cmp::max (3,082,669 samples, 0.05%)</title><rect x="19.5198%" y="69" width="0.0483%" height="15" fill="rgb(246,142,3)" fg:x="1245656710" fg:w="3082669"/><text x="19.7698%" y="79.50"></text></g><g><title>core::cmp::Ord::max (3,082,669 samples, 0.05%)</title><rect x="19.5198%" y="53" width="0.0483%" height="15" fill="rgb(241,25,7)" fg:x="1245656710" fg:w="3082669"/><text x="19.7698%" y="63.50"></text></g><g><title>core::cmp::max_by (3,082,669 samples, 0.05%)</title><rect x="19.5198%" y="37" width="0.0483%" height="15" fill="rgb(242,119,39)" fg:x="1245656710" fg:w="3082669"/><text x="19.7698%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (131,252,317 samples, 2.06%)</title><rect x="17.5586%" y="149" width="2.0568%" height="15" fill="rgb(241,98,45)" fg:x="1120507267" fg:w="131252317"/><text x="17.8086%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (131,252,317 samples, 2.06%)</title><rect x="17.5586%" y="133" width="2.0568%" height="15" fill="rgb(254,28,30)" fg:x="1120507267" fg:w="131252317"/><text x="17.8086%" y="143.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (131,252,317 samples, 2.06%)</title><rect x="17.5586%" y="117" width="2.0568%" height="15" fill="rgb(241,142,54)" fg:x="1120507267" fg:w="131252317"/><text x="17.8086%" y="127.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (122,336,136 samples, 1.92%)</title><rect x="17.6984%" y="101" width="1.9170%" height="15" fill="rgb(222,85,15)" fg:x="1129423448" fg:w="122336136"/><text x="17.9484%" y="111.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (109,888,206 samples, 1.72%)</title><rect x="17.8934%" y="85" width="1.7220%" height="15" fill="rgb(210,85,47)" fg:x="1141871378" fg:w="109888206"/><text x="18.1434%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3,020,205 samples, 0.05%)</title><rect x="19.5681%" y="69" width="0.0473%" height="15" fill="rgb(224,206,25)" fg:x="1248739379" fg:w="3020205"/><text x="19.8181%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (192,525,050 samples, 3.02%)</title><rect x="17.2174%" y="229" width="3.0169%" height="15" fill="rgb(243,201,19)" fg:x="1098730894" fg:w="192525050"/><text x="17.4674%" y="239.50">&lt;al..</text></g><g><title>alloc::string::String::push_str (176,967,663 samples, 2.77%)</title><rect x="17.4612%" y="213" width="2.7731%" height="15" fill="rgb(236,59,4)" fg:x="1114288281" fg:w="176967663"/><text x="17.7112%" y="223.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (176,967,663 samples, 2.77%)</title><rect x="17.4612%" y="197" width="2.7731%" height="15" fill="rgb(254,179,45)" fg:x="1114288281" fg:w="176967663"/><text x="17.7112%" y="207.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (176,967,663 samples, 2.77%)</title><rect x="17.4612%" y="181" width="2.7731%" height="15" fill="rgb(226,14,10)" fg:x="1114288281" fg:w="176967663"/><text x="17.7112%" y="191.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (176,967,663 samples, 2.77%)</title><rect x="17.4612%" y="165" width="2.7731%" height="15" fill="rgb(244,27,41)" fg:x="1114288281" fg:w="176967663"/><text x="17.7112%" y="175.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (39,496,360 samples, 0.62%)</title><rect x="19.6154%" y="149" width="0.6189%" height="15" fill="rgb(235,35,32)" fg:x="1251759584" fg:w="39496360"/><text x="19.8654%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (30,222,381 samples, 0.47%)</title><rect x="19.7607%" y="133" width="0.4736%" height="15" fill="rgb(218,68,31)" fg:x="1261033563" fg:w="30222381"/><text x="20.0107%" y="143.50"></text></g><g><title>&lt;core::fmt::num::Binary as core::fmt::num::GenericRadix&gt;::digit (3,055,292 samples, 0.05%)</title><rect x="20.2343%" y="229" width="0.0479%" height="15" fill="rgb(207,120,37)" fg:x="1291255944" fg:w="3055292"/><text x="20.4843%" y="239.50"></text></g><g><title>&lt;u8 as core::ops::arith::Div&gt;::div (3,106,451 samples, 0.05%)</title><rect x="20.2822%" y="229" width="0.0487%" height="15" fill="rgb(227,98,0)" fg:x="1294311236" fg:w="3106451"/><text x="20.5322%" y="239.50"></text></g><g><title>&lt;u8 as core::ops::arith::Rem&gt;::rem (3,116,470 samples, 0.05%)</title><rect x="20.3309%" y="229" width="0.0488%" height="15" fill="rgb(207,7,3)" fg:x="1297417687" fg:w="3116470"/><text x="20.5809%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (12,364,371 samples, 0.19%)</title><rect x="20.3797%" y="229" width="0.1938%" height="15" fill="rgb(206,98,19)" fg:x="1300534157" fg:w="12364371"/><text x="20.6297%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad_integral (55,541,625 samples, 0.87%)</title><rect x="20.5735%" y="229" width="0.8704%" height="15" fill="rgb(217,5,26)" fg:x="1312898528" fg:w="55541625"/><text x="20.8235%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (15,267,280 samples, 0.24%)</title><rect x="21.2046%" y="213" width="0.2392%" height="15" fill="rgb(235,190,38)" fg:x="1353172873" fg:w="15267280"/><text x="21.4546%" y="223.50"></text></g><g><title>alloc::fmt::format (478,770,994 samples, 7.50%)</title><rect x="14.2830%" y="405" width="7.5025%" height="15" fill="rgb(247,86,24)" fg:x="911469496" fg:w="478770994"/><text x="14.5330%" y="415.50">alloc::fmt..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (478,770,994 samples, 7.50%)</title><rect x="14.2830%" y="389" width="7.5025%" height="15" fill="rgb(205,101,16)" fg:x="911469496" fg:w="478770994"/><text x="14.5330%" y="399.50">core::opti..</text></g><g><title>alloc::fmt::format::_{{closure}} (478,770,994 samples, 7.50%)</title><rect x="14.2830%" y="373" width="7.5025%" height="15" fill="rgb(246,168,33)" fg:x="911469496" fg:w="478770994"/><text x="14.5330%" y="383.50">alloc::fmt..</text></g><g><title>alloc::fmt::format::format_inner (478,770,994 samples, 7.50%)</title><rect x="14.2830%" y="357" width="7.5025%" height="15" fill="rgb(231,114,1)" fg:x="911469496" fg:w="478770994"/><text x="14.5330%" y="367.50">alloc::fmt..</text></g><g><title>core::fmt::Write::write_fmt (417,317,384 samples, 6.54%)</title><rect x="15.2460%" y="341" width="6.5395%" height="15" fill="rgb(207,184,53)" fg:x="972923106" fg:w="417317384"/><text x="15.4960%" y="351.50">core::fmt..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (417,317,384 samples, 6.54%)</title><rect x="15.2460%" y="325" width="6.5395%" height="15" fill="rgb(224,95,51)" fg:x="972923106" fg:w="417317384"/><text x="15.4960%" y="335.50">&lt;&amp;mut W a..</text></g><g><title>core::fmt::write (414,138,736 samples, 6.49%)</title><rect x="15.2958%" y="309" width="6.4897%" height="15" fill="rgb(212,188,45)" fg:x="976101754" fg:w="414138736"/><text x="15.5458%" y="319.50">core::fm..</text></g><g><title>core::fmt::rt::Argument::fmt (352,552,535 samples, 5.52%)</title><rect x="16.2608%" y="293" width="5.5246%" height="15" fill="rgb(223,154,38)" fg:x="1037687955" fg:w="352552535"/><text x="16.5108%" y="303.50">core::f..</text></g><g><title>&lt;&amp;T as core::fmt::Binary&gt;::fmt (337,588,870 samples, 5.29%)</title><rect x="16.4953%" y="277" width="5.2901%" height="15" fill="rgb(251,22,52)" fg:x="1052651620" fg:w="337588870"/><text x="16.7453%" y="287.50">&lt;&amp;T as..</text></g><g><title>core::fmt::num::&lt;impl core::fmt::Binary for i8&gt;::fmt (328,332,469 samples, 5.15%)</title><rect x="16.6404%" y="261" width="5.1451%" height="15" fill="rgb(229,209,22)" fg:x="1061908021" fg:w="328332469"/><text x="16.8904%" y="271.50">core::..</text></g><g><title>core::fmt::num::GenericRadix::fmt_int (319,091,487 samples, 5.00%)</title><rect x="16.7852%" y="245" width="5.0002%" height="15" fill="rgb(234,138,34)" fg:x="1071149003" fg:w="319091487"/><text x="17.0352%" y="255.50">core::..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (21,800,337 samples, 0.34%)</title><rect x="21.4438%" y="229" width="0.3416%" height="15" fill="rgb(212,95,11)" fg:x="1368440153" fg:w="21800337"/><text x="21.6938%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (40,578,635 samples, 0.64%)</title><rect x="21.7854%" y="405" width="0.6359%" height="15" fill="rgb(240,179,47)" fg:x="1390240490" fg:w="40578635"/><text x="22.0354%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (40,578,635 samples, 0.64%)</title><rect x="21.7854%" y="389" width="0.6359%" height="15" fill="rgb(240,163,11)" fg:x="1390240490" fg:w="40578635"/><text x="22.0354%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (40,578,635 samples, 0.64%)</title><rect x="21.7854%" y="373" width="0.6359%" height="15" fill="rgb(236,37,12)" fg:x="1390240490" fg:w="40578635"/><text x="22.0354%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34,487,847 samples, 0.54%)</title><rect x="21.8809%" y="357" width="0.5404%" height="15" fill="rgb(232,164,16)" fg:x="1396331278" fg:w="34487847"/><text x="22.1309%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (25,055,243 samples, 0.39%)</title><rect x="22.0287%" y="341" width="0.3926%" height="15" fill="rgb(244,205,15)" fg:x="1405763882" fg:w="25055243"/><text x="22.2787%" y="351.50"></text></g><g><title>core::fmt::Arguments::new_v1 (12,333,180 samples, 0.19%)</title><rect x="22.4213%" y="405" width="0.1933%" height="15" fill="rgb(223,117,47)" fg:x="1430819125" fg:w="12333180"/><text x="22.6713%" y="415.50"></text></g><g><title>core::hint::must_use (12,359,092 samples, 0.19%)</title><rect x="22.6146%" y="405" width="0.1937%" height="15" fill="rgb(244,107,35)" fg:x="1443152305" fg:w="12359092"/><text x="22.8646%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="405" width="1.2531%" height="15" fill="rgb(205,140,8)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="389" width="1.2531%" height="15" fill="rgb(228,84,46)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="373" width="1.2531%" height="15" fill="rgb(254,188,9)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="357" width="1.2531%" height="15" fill="rgb(206,112,54)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="341" width="1.2531%" height="15" fill="rgb(216,84,49)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="325" width="1.2531%" height="15" fill="rgb(214,194,35)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="309" width="1.2531%" height="15" fill="rgb(249,28,3)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="319.50"></text></g><g><title>__rdl_dealloc (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="293" width="1.2531%" height="15" fill="rgb(222,56,52)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="277" width="1.2531%" height="15" fill="rgb(245,217,50)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (79,967,025 samples, 1.25%)</title><rect x="22.8082%" y="261" width="1.2531%" height="15" fill="rgb(213,201,24)" fg:x="1455511397" fg:w="79967025"/><text x="23.0582%" y="271.50"></text></g><g><title>_int_free (31,045,026 samples, 0.49%)</title><rect x="23.5749%" y="245" width="0.4865%" height="15" fill="rgb(248,116,28)" fg:x="1504433396" fg:w="31045026"/><text x="23.8249%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::Padded&gt;::from_vec_u8 (927,015,563 samples, 14.53%)</title><rect x="11.0332%" y="421" width="14.5266%" height="15" fill="rgb(219,72,43)" fg:x="704084706" fg:w="927015563"/><text x="11.2832%" y="431.50">&lt;alloc::vec::Vec&lt;u8&gt; a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="405" width="1.4984%" height="15" fill="rgb(209,138,14)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="389" width="1.4984%" height="15" fill="rgb(222,18,33)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="373" width="1.4984%" height="15" fill="rgb(213,199,7)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="357" width="1.4984%" height="15" fill="rgb(250,110,10)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="341" width="1.4984%" height="15" fill="rgb(248,123,6)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="325" width="1.4984%" height="15" fill="rgb(206,91,31)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="335.50"></text></g><g><title>__rdl_dealloc (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="309" width="1.4984%" height="15" fill="rgb(211,154,13)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="293" width="1.4984%" height="15" fill="rgb(225,148,7)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (95,621,847 samples, 1.50%)</title><rect x="24.0613%" y="277" width="1.4984%" height="15" fill="rgb(220,160,43)" fg:x="1535478422" fg:w="95621847"/><text x="24.3113%" y="287.50"></text></g><g><title>_int_free (43,307,193 samples, 0.68%)</title><rect x="24.8811%" y="261" width="0.6786%" height="15" fill="rgb(213,52,39)" fg:x="1587793076" fg:w="43307193"/><text x="25.1311%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18,436,399 samples, 0.29%)</title><rect x="26.1732%" y="405" width="0.2889%" height="15" fill="rgb(243,137,7)" fg:x="1670249831" fg:w="18436399"/><text x="26.4232%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (18,436,399 samples, 0.29%)</title><rect x="26.1732%" y="389" width="0.2889%" height="15" fill="rgb(230,79,13)" fg:x="1670249831" fg:w="18436399"/><text x="26.4232%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,181,135 samples, 0.05%)</title><rect x="26.5556%" y="357" width="0.0498%" height="15" fill="rgb(247,105,23)" fg:x="1694646519" fg:w="3181135"/><text x="26.8056%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,181,135 samples, 0.05%)</title><rect x="26.5556%" y="341" width="0.0498%" height="15" fill="rgb(223,179,41)" fg:x="1694646519" fg:w="3181135"/><text x="26.8056%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,181,135 samples, 0.05%)</title><rect x="26.5556%" y="325" width="0.0498%" height="15" fill="rgb(218,9,34)" fg:x="1694646519" fg:w="3181135"/><text x="26.8056%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (3,181,135 samples, 0.05%)</title><rect x="26.5556%" y="309" width="0.0498%" height="15" fill="rgb(222,106,8)" fg:x="1694646519" fg:w="3181135"/><text x="26.8056%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (3,181,135 samples, 0.05%)</title><rect x="26.5556%" y="293" width="0.0498%" height="15" fill="rgb(211,220,0)" fg:x="1694646519" fg:w="3181135"/><text x="26.8056%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (60,924,391 samples, 0.95%)</title><rect x="26.4622%" y="405" width="0.9547%" height="15" fill="rgb(229,52,16)" fg:x="1688686230" fg:w="60924391"/><text x="26.7122%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (60,924,391 samples, 0.95%)</title><rect x="26.4622%" y="389" width="0.9547%" height="15" fill="rgb(212,155,18)" fg:x="1688686230" fg:w="60924391"/><text x="26.7122%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (60,924,391 samples, 0.95%)</title><rect x="26.4622%" y="373" width="0.9547%" height="15" fill="rgb(242,21,14)" fg:x="1688686230" fg:w="60924391"/><text x="26.7122%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51,782,967 samples, 0.81%)</title><rect x="26.6054%" y="357" width="0.8115%" height="15" fill="rgb(222,19,48)" fg:x="1697827654" fg:w="51782967"/><text x="26.8554%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (51,782,967 samples, 0.81%)</title><rect x="26.6054%" y="341" width="0.8115%" height="15" fill="rgb(232,45,27)" fg:x="1697827654" fg:w="51782967"/><text x="26.8554%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6,297,304 samples, 0.10%)</title><rect x="27.7944%" y="341" width="0.0987%" height="15" fill="rgb(249,103,42)" fg:x="1773706447" fg:w="6297304"/><text x="28.0444%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (6,326,743 samples, 0.10%)</title><rect x="27.8931%" y="341" width="0.0991%" height="15" fill="rgb(246,81,33)" fg:x="1780003751" fg:w="6326743"/><text x="28.1431%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (9,466,953 samples, 0.15%)</title><rect x="28.1339%" y="325" width="0.1483%" height="15" fill="rgb(252,33,42)" fg:x="1795369085" fg:w="9466953"/><text x="28.3839%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (86,728,454 samples, 1.36%)</title><rect x="27.9923%" y="341" width="1.3591%" height="15" fill="rgb(209,212,41)" fg:x="1786330494" fg:w="86728454"/><text x="28.2423%" y="351.50"></text></g><g><title>malloc (68,222,910 samples, 1.07%)</title><rect x="28.2822%" y="325" width="1.0691%" height="15" fill="rgb(207,154,6)" fg:x="1804836038" fg:w="68222910"/><text x="28.5322%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (111,550,563 samples, 1.75%)</title><rect x="27.7473%" y="389" width="1.7480%" height="15" fill="rgb(223,64,47)" fg:x="1770698118" fg:w="111550563"/><text x="27.9973%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (111,550,563 samples, 1.75%)</title><rect x="27.7473%" y="373" width="1.7480%" height="15" fill="rgb(211,161,38)" fg:x="1770698118" fg:w="111550563"/><text x="27.9973%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (108,542,234 samples, 1.70%)</title><rect x="27.7944%" y="357" width="1.7009%" height="15" fill="rgb(219,138,40)" fg:x="1773706447" fg:w="108542234"/><text x="28.0444%" y="367.50"></text></g><g><title>core::cmp::max (9,189,733 samples, 0.14%)</title><rect x="29.3513%" y="341" width="0.1440%" height="15" fill="rgb(241,228,46)" fg:x="1873058948" fg:w="9189733"/><text x="29.6013%" y="351.50"></text></g><g><title>core::cmp::Ord::max (9,189,733 samples, 0.14%)</title><rect x="29.3513%" y="325" width="0.1440%" height="15" fill="rgb(223,209,38)" fg:x="1873058948" fg:w="9189733"/><text x="29.6013%" y="335.50"></text></g><g><title>core::cmp::max_by (9,189,733 samples, 0.14%)</title><rect x="29.3513%" y="309" width="0.1440%" height="15" fill="rgb(236,164,45)" fg:x="1873058948" fg:w="9189733"/><text x="29.6013%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3,030,389 samples, 0.05%)</title><rect x="29.4953%" y="389" width="0.0475%" height="15" fill="rgb(231,15,5)" fg:x="1882248681" fg:w="3030389"/><text x="29.7453%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,030,389 samples, 0.05%)</title><rect x="29.4953%" y="373" width="0.0475%" height="15" fill="rgb(252,35,15)" fg:x="1882248681" fg:w="3030389"/><text x="29.7453%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,030,389 samples, 0.05%)</title><rect x="29.4953%" y="357" width="0.0475%" height="15" fill="rgb(248,181,18)" fg:x="1882248681" fg:w="3030389"/><text x="29.7453%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,030,389 samples, 0.05%)</title><rect x="29.4953%" y="341" width="0.0475%" height="15" fill="rgb(233,39,42)" fg:x="1882248681" fg:w="3030389"/><text x="29.7453%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (181,505,453 samples, 2.84%)</title><rect x="27.4169%" y="405" width="2.8442%" height="15" fill="rgb(238,110,33)" fg:x="1749610621" fg:w="181505453"/><text x="27.6669%" y="415.50">al..</text></g><g><title>core::ptr::write (45,837,004 samples, 0.72%)</title><rect x="29.5428%" y="389" width="0.7183%" height="15" fill="rgb(233,195,10)" fg:x="1885279070" fg:w="45837004"/><text x="29.7928%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::Padded&gt;::unpad (388,620,456 samples, 6.09%)</title><rect x="25.5598%" y="421" width="6.0898%" height="15" fill="rgb(254,105,3)" fg:x="1631100269" fg:w="388620456"/><text x="25.8098%" y="431.50">&lt;alloc::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="405" width="1.3885%" height="15" fill="rgb(221,225,9)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="389" width="1.3885%" height="15" fill="rgb(224,227,45)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="373" width="1.3885%" height="15" fill="rgb(229,198,43)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="357" width="1.3885%" height="15" fill="rgb(206,209,35)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="341" width="1.3885%" height="15" fill="rgb(245,195,53)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="325" width="1.3885%" height="15" fill="rgb(240,92,26)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="335.50"></text></g><g><title>__rdl_dealloc (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="309" width="1.3885%" height="15" fill="rgb(207,40,23)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="293" width="1.3885%" height="15" fill="rgb(223,111,35)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (88,604,651 samples, 1.39%)</title><rect x="30.2611%" y="277" width="1.3885%" height="15" fill="rgb(229,147,28)" fg:x="1931116074" fg:w="88604651"/><text x="30.5111%" y="287.50"></text></g><g><title>_int_free (58,150,962 samples, 0.91%)</title><rect x="30.7383%" y="261" width="0.9112%" height="15" fill="rgb(211,29,28)" fg:x="1961569763" fg:w="58150962"/><text x="30.9883%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,348,054 samples, 0.15%)</title><rect x="32.4355%" y="405" width="0.1465%" height="15" fill="rgb(228,72,33)" fg:x="2069877697" fg:w="9348054"/><text x="32.6855%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (9,348,054 samples, 0.15%)</title><rect x="32.4355%" y="389" width="0.1465%" height="15" fill="rgb(205,214,31)" fg:x="2069877697" fg:w="9348054"/><text x="32.6855%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (24,821,584 samples, 0.39%)</title><rect x="33.3630%" y="341" width="0.3890%" height="15" fill="rgb(224,111,15)" fg:x="2129067341" fg:w="24821584"/><text x="33.6130%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (12,425,651 samples, 0.19%)</title><rect x="33.7520%" y="341" width="0.1947%" height="15" fill="rgb(253,21,26)" fg:x="2153888925" fg:w="12425651"/><text x="34.0020%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (9,347,958 samples, 0.15%)</title><rect x="33.9467%" y="341" width="0.1465%" height="15" fill="rgb(245,139,43)" fg:x="2166314576" fg:w="9347958"/><text x="34.1967%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (12,551,915 samples, 0.20%)</title><rect x="34.8250%" y="325" width="0.1967%" height="15" fill="rgb(252,170,7)" fg:x="2222364022" fg:w="12551915"/><text x="35.0750%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (168,157,009 samples, 2.64%)</title><rect x="34.0932%" y="341" width="2.6351%" height="15" fill="rgb(231,118,14)" fg:x="2175662534" fg:w="168157009"/><text x="34.3432%" y="351.50">al..</text></g><g><title>malloc (108,903,606 samples, 1.71%)</title><rect x="35.0217%" y="325" width="1.7065%" height="15" fill="rgb(238,83,0)" fg:x="2234915937" fg:w="108903606"/><text x="35.2717%" y="335.50"></text></g><g><title>alloc::raw_vec::layout_array (6,422,929 samples, 0.10%)</title><rect x="36.7283%" y="341" width="0.1006%" height="15" fill="rgb(221,39,39)" fg:x="2343819543" fg:w="6422929"/><text x="36.9783%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::repeat (6,422,929 samples, 0.10%)</title><rect x="36.7283%" y="325" width="0.1006%" height="15" fill="rgb(222,119,46)" fg:x="2343819543" fg:w="6422929"/><text x="36.9783%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (6,422,929 samples, 0.10%)</title><rect x="36.7283%" y="309" width="0.1006%" height="15" fill="rgb(222,165,49)" fg:x="2343819543" fg:w="6422929"/><text x="36.9783%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (6,422,929 samples, 0.10%)</title><rect x="36.7283%" y="293" width="0.1006%" height="15" fill="rgb(219,113,52)" fg:x="2343819543" fg:w="6422929"/><text x="36.9783%" y="303.50"></text></g><g><title>core::cmp::max (18,846,363 samples, 0.30%)</title><rect x="36.8289%" y="341" width="0.2953%" height="15" fill="rgb(214,7,15)" fg:x="2350242472" fg:w="18846363"/><text x="37.0789%" y="351.50"></text></g><g><title>core::cmp::Ord::max (18,846,363 samples, 0.30%)</title><rect x="36.8289%" y="325" width="0.2953%" height="15" fill="rgb(235,32,4)" fg:x="2350242472" fg:w="18846363"/><text x="37.0789%" y="335.50"></text></g><g><title>core::cmp::max_by (18,846,363 samples, 0.30%)</title><rect x="36.8289%" y="309" width="0.2953%" height="15" fill="rgb(238,90,54)" fg:x="2350242472" fg:w="18846363"/><text x="37.0789%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (264,930,926 samples, 4.15%)</title><rect x="33.2149%" y="389" width="4.1515%" height="15" fill="rgb(213,208,19)" fg:x="2119611417" fg:w="264930926"/><text x="33.4649%" y="399.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (264,930,926 samples, 4.15%)</title><rect x="33.2149%" y="373" width="4.1515%" height="15" fill="rgb(233,156,4)" fg:x="2119611417" fg:w="264930926"/><text x="33.4649%" y="383.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (261,786,787 samples, 4.10%)</title><rect x="33.2641%" y="357" width="4.1023%" height="15" fill="rgb(207,194,5)" fg:x="2122755556" fg:w="261786787"/><text x="33.5141%" y="367.50">allo..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (15,453,508 samples, 0.24%)</title><rect x="37.1242%" y="341" width="0.2422%" height="15" fill="rgb(206,111,30)" fg:x="2369088835" fg:w="15453508"/><text x="37.3742%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6,251,625 samples, 0.10%)</title><rect x="37.3664%" y="389" width="0.0980%" height="15" fill="rgb(243,70,54)" fg:x="2384542343" fg:w="6251625"/><text x="37.6164%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6,251,625 samples, 0.10%)</title><rect x="37.3664%" y="373" width="0.0980%" height="15" fill="rgb(242,28,8)" fg:x="2384542343" fg:w="6251625"/><text x="37.6164%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (6,251,625 samples, 0.10%)</title><rect x="37.3664%" y="357" width="0.0980%" height="15" fill="rgb(219,106,18)" fg:x="2384542343" fg:w="6251625"/><text x="37.6164%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (6,251,625 samples, 0.10%)</title><rect x="37.3664%" y="341" width="0.0980%" height="15" fill="rgb(244,222,10)" fg:x="2384542343" fg:w="6251625"/><text x="37.6164%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (355,440,914 samples, 5.57%)</title><rect x="32.5820%" y="405" width="5.5699%" height="15" fill="rgb(236,179,52)" fg:x="2079225751" fg:w="355440914"/><text x="32.8320%" y="415.50">alloc::..</text></g><g><title>core::ptr::write (43,872,697 samples, 0.69%)</title><rect x="37.4644%" y="389" width="0.6875%" height="15" fill="rgb(213,23,39)" fg:x="2390793968" fg:w="43872697"/><text x="37.7144%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="405" width="2.9465%" height="15" fill="rgb(238,48,10)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="415.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="389" width="2.9465%" height="15" fill="rgb(251,196,23)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="399.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="373" width="2.9465%" height="15" fill="rgb(250,152,24)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="383.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="357" width="2.9465%" height="15" fill="rgb(209,150,17)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="367.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="341" width="2.9465%" height="15" fill="rgb(234,202,34)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="351.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="325" width="2.9465%" height="15" fill="rgb(253,148,53)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="335.50">al..</text></g><g><title>__rdl_dealloc (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="309" width="2.9465%" height="15" fill="rgb(218,129,16)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="319.50">__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="293" width="2.9465%" height="15" fill="rgb(216,85,19)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="303.50">st..</text></g><g><title>cfree@GLIBC_2.2.5 (188,030,864 samples, 2.95%)</title><rect x="38.1519%" y="277" width="2.9465%" height="15" fill="rgb(235,228,7)" fg:x="2434666665" fg:w="188030864"/><text x="38.4019%" y="287.50">cf..</text></g><g><title>_int_free (118,935,129 samples, 1.86%)</title><rect x="39.2346%" y="261" width="1.8637%" height="15" fill="rgb(245,175,0)" fg:x="2503762400" fg:w="118935129"/><text x="39.4846%" y="271.50">_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9,489,889 samples, 0.15%)</title><rect x="42.0790%" y="325" width="0.1487%" height="15" fill="rgb(208,168,36)" fg:x="2685276411" fg:w="9489889"/><text x="42.3290%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (9,489,889 samples, 0.15%)</title><rect x="42.0790%" y="309" width="0.1487%" height="15" fill="rgb(246,171,24)" fg:x="2685276411" fg:w="9489889"/><text x="42.3290%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (9,489,889 samples, 0.15%)</title><rect x="42.0790%" y="293" width="0.1487%" height="15" fill="rgb(215,142,24)" fg:x="2685276411" fg:w="9489889"/><text x="42.3290%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,489,889 samples, 0.15%)</title><rect x="42.0790%" y="277" width="0.1487%" height="15" fill="rgb(250,187,7)" fg:x="2685276411" fg:w="9489889"/><text x="42.3290%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (37,357,219 samples, 0.59%)</title><rect x="44.6297%" y="245" width="0.5854%" height="15" fill="rgb(228,66,33)" fg:x="2848052435" fg:w="37357219"/><text x="44.8797%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (83,939,282 samples, 1.32%)</title><rect x="44.3883%" y="261" width="1.3154%" height="15" fill="rgb(234,215,21)" fg:x="2832647525" fg:w="83939282"/><text x="44.6383%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (31,177,153 samples, 0.49%)</title><rect x="45.2151%" y="245" width="0.4886%" height="15" fill="rgb(222,191,20)" fg:x="2885409654" fg:w="31177153"/><text x="45.4651%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (115,855,403 samples, 1.82%)</title><rect x="46.6368%" y="245" width="1.8155%" height="15" fill="rgb(245,79,54)" fg:x="2976131248" fg:w="115855403"/><text x="46.8868%" y="255.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (471,879,402 samples, 7.39%)</title><rect x="42.4756%" y="309" width="7.3945%" height="15" fill="rgb(240,10,37)" fg:x="2710585732" fg:w="471879402"/><text x="42.7256%" y="319.50">&lt;std::hash..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (471,879,402 samples, 7.39%)</title><rect x="42.4756%" y="293" width="7.3945%" height="15" fill="rgb(214,192,32)" fg:x="2710585732" fg:w="471879402"/><text x="42.7256%" y="303.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (471,879,402 samples, 7.39%)</title><rect x="42.4756%" y="277" width="7.3945%" height="15" fill="rgb(209,36,54)" fg:x="2710585732" fg:w="471879402"/><text x="42.7256%" y="287.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (265,878,327 samples, 4.17%)</title><rect x="45.7037%" y="261" width="4.1664%" height="15" fill="rgb(220,10,11)" fg:x="2916586807" fg:w="265878327"/><text x="45.9537%" y="271.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (90,478,483 samples, 1.42%)</title><rect x="48.4522%" y="245" width="1.4178%" height="15" fill="rgb(221,106,17)" fg:x="3091986651" fg:w="90478483"/><text x="48.7022%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (124,747,528 samples, 1.95%)</title><rect x="49.8701%" y="309" width="1.9548%" height="15" fill="rgb(251,142,44)" fg:x="3182465134" fg:w="124747528"/><text x="50.1201%" y="319.50">&lt;..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (31,378,767 samples, 0.49%)</title><rect x="51.3332%" y="293" width="0.4917%" height="15" fill="rgb(238,13,15)" fg:x="3275833895" fg:w="31378767"/><text x="51.5832%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (31,378,767 samples, 0.49%)</title><rect x="51.3332%" y="277" width="0.4917%" height="15" fill="rgb(208,107,27)" fg:x="3275833895" fg:w="31378767"/><text x="51.5832%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (31,378,767 samples, 0.49%)</title><rect x="51.3332%" y="261" width="0.4917%" height="15" fill="rgb(205,136,37)" fg:x="3275833895" fg:w="31378767"/><text x="51.5832%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12,316,282 samples, 0.19%)</title><rect x="55.5894%" y="165" width="0.1930%" height="15" fill="rgb(250,205,27)" fg:x="3547447611" fg:w="12316282"/><text x="55.8394%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (80,480,846 samples, 1.26%)</title><rect x="54.9607%" y="181" width="1.2612%" height="15" fill="rgb(210,80,43)" fg:x="3507326626" fg:w="80480846"/><text x="55.2107%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (28,043,579 samples, 0.44%)</title><rect x="55.7824%" y="165" width="0.4395%" height="15" fill="rgb(247,160,36)" fg:x="3559763893" fg:w="28043579"/><text x="56.0324%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (358,679,923 samples, 5.62%)</title><rect x="51.8249%" y="229" width="5.6206%" height="15" fill="rgb(234,13,49)" fg:x="3307212662" fg:w="358679923"/><text x="52.0749%" y="239.50">&lt;std::h..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (358,679,923 samples, 5.62%)</title><rect x="51.8249%" y="213" width="5.6206%" height="15" fill="rgb(234,122,0)" fg:x="3307212662" fg:w="358679923"/><text x="52.0749%" y="223.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (342,803,403 samples, 5.37%)</title><rect x="52.0737%" y="197" width="5.3718%" height="15" fill="rgb(207,146,38)" fg:x="3323089182" fg:w="342803403"/><text x="52.3237%" y="207.50">&lt;core::..</text></g><g><title>core::hash::sip::u8to64_le (78,085,113 samples, 1.22%)</title><rect x="56.2219%" y="181" width="1.2236%" height="15" fill="rgb(207,177,25)" fg:x="3587807472" fg:w="78085113"/><text x="56.4719%" y="191.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (361,541,192 samples, 5.67%)</title><rect x="51.8249%" y="261" width="5.6654%" height="15" fill="rgb(211,178,42)" fg:x="3307212662" fg:w="361541192"/><text x="52.0749%" y="271.50">core::h..</text></g><g><title>core::hash::Hasher::write_usize (361,541,192 samples, 5.67%)</title><rect x="51.8249%" y="245" width="5.6654%" height="15" fill="rgb(230,69,54)" fg:x="3307212662" fg:w="361541192"/><text x="52.0749%" y="255.50">core::h..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2,861,269 samples, 0.04%)</title><rect x="57.4455%" y="229" width="0.0448%" height="15" fill="rgb(214,135,41)" fg:x="3665892585" fg:w="2861269"/><text x="57.6955%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (1,298,662,412 samples, 20.35%)</title><rect x="41.0984%" y="341" width="20.3504%" height="15" fill="rgb(237,67,25)" fg:x="2622697529" fg:w="1298662412"/><text x="41.3484%" y="351.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (1,226,593,641 samples, 19.22%)</title><rect x="42.2277%" y="325" width="19.2210%" height="15" fill="rgb(222,189,50)" fg:x="2694766300" fg:w="1226593641"/><text x="42.4777%" y="335.50">core::hash::BuildHasher::hash_..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (614,147,279 samples, 9.62%)</title><rect x="51.8249%" y="309" width="9.6238%" height="15" fill="rgb(245,148,34)" fg:x="3307212662" fg:w="614147279"/><text x="52.0749%" y="319.50">core::hash::im..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (614,147,279 samples, 9.62%)</title><rect x="51.8249%" y="293" width="9.6238%" height="15" fill="rgb(222,29,6)" fg:x="3307212662" fg:w="614147279"/><text x="52.0749%" y="303.50">&lt;alloc::vec::V..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (614,147,279 samples, 9.62%)</title><rect x="51.8249%" y="277" width="9.6238%" height="15" fill="rgb(221,189,43)" fg:x="3307212662" fg:w="614147279"/><text x="52.0749%" y="287.50">core::hash::im..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (252,606,087 samples, 3.96%)</title><rect x="57.4903%" y="261" width="3.9584%" height="15" fill="rgb(207,36,27)" fg:x="3668753854" fg:w="252606087"/><text x="57.7403%" y="271.50">core..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (252,606,087 samples, 3.96%)</title><rect x="57.4903%" y="245" width="3.9584%" height="15" fill="rgb(217,90,24)" fg:x="3668753854" fg:w="252606087"/><text x="57.7403%" y="255.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (252,606,087 samples, 3.96%)</title><rect x="57.4903%" y="229" width="3.9584%" height="15" fill="rgb(224,66,35)" fg:x="3668753854" fg:w="252606087"/><text x="57.7403%" y="239.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (243,176,488 samples, 3.81%)</title><rect x="57.6381%" y="213" width="3.8106%" height="15" fill="rgb(221,13,50)" fg:x="3678183453" fg:w="243176488"/><text x="57.8881%" y="223.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (155,265,033 samples, 2.43%)</title><rect x="59.0157%" y="197" width="2.4330%" height="15" fill="rgb(236,68,49)" fg:x="3766094908" fg:w="155265033"/><text x="59.2657%" y="207.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3,004,531 samples, 0.05%)</title><rect x="61.4016%" y="181" width="0.0471%" height="15" fill="rgb(229,146,28)" fg:x="3918355410" fg:w="3004531"/><text x="61.6516%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (15,765,372 samples, 0.25%)</title><rect x="61.8487%" y="293" width="0.2470%" height="15" fill="rgb(225,31,38)" fg:x="3946884383" fg:w="15765372"/><text x="62.0987%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (15,765,372 samples, 0.25%)</title><rect x="61.8487%" y="277" width="0.2470%" height="15" fill="rgb(250,208,3)" fg:x="3946884383" fg:w="15765372"/><text x="62.0987%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (12,623,904 samples, 0.20%)</title><rect x="61.8979%" y="261" width="0.1978%" height="15" fill="rgb(246,54,23)" fg:x="3950025851" fg:w="12623904"/><text x="62.1479%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (12,623,904 samples, 0.20%)</title><rect x="61.8979%" y="245" width="0.1978%" height="15" fill="rgb(243,76,11)" fg:x="3950025851" fg:w="12623904"/><text x="62.1479%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (224,888,192 samples, 3.52%)</title><rect x="62.0958%" y="277" width="3.5241%" height="15" fill="rgb(245,21,50)" fg:x="3962649755" fg:w="224888192"/><text x="62.3458%" y="287.50">has..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (224,888,192 samples, 3.52%)</title><rect x="62.0958%" y="261" width="3.5241%" height="15" fill="rgb(228,9,43)" fg:x="3962649755" fg:w="224888192"/><text x="62.3458%" y="271.50">&lt;Q ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (224,888,192 samples, 3.52%)</title><rect x="62.0958%" y="245" width="3.5241%" height="15" fill="rgb(208,100,47)" fg:x="3962649755" fg:w="224888192"/><text x="62.3458%" y="255.50">cor..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (218,563,802 samples, 3.42%)</title><rect x="62.1949%" y="229" width="3.4250%" height="15" fill="rgb(232,26,8)" fg:x="3968974145" fg:w="218563802"/><text x="62.4449%" y="239.50">all..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (218,563,802 samples, 3.42%)</title><rect x="62.1949%" y="213" width="3.4250%" height="15" fill="rgb(216,166,38)" fg:x="3968974145" fg:w="218563802"/><text x="62.4449%" y="223.50">cor..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (218,563,802 samples, 3.42%)</title><rect x="62.1949%" y="197" width="3.4250%" height="15" fill="rgb(251,202,51)" fg:x="3968974145" fg:w="218563802"/><text x="62.4449%" y="207.50">&lt;[A..</text></g><g><title>__memcmp_avx2_movbe (165,411,146 samples, 2.59%)</title><rect x="63.0278%" y="181" width="2.5920%" height="15" fill="rgb(254,216,34)" fg:x="4022126801" fg:w="165411146"/><text x="63.2778%" y="191.50">__..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (246,799,330 samples, 3.87%)</title><rect x="62.0958%" y="293" width="3.8674%" height="15" fill="rgb(251,32,27)" fg:x="3962649755" fg:w="246799330"/><text x="62.3458%" y="303.50">hash..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (21,911,138 samples, 0.34%)</title><rect x="65.6198%" y="277" width="0.3434%" height="15" fill="rgb(208,127,28)" fg:x="4187537947" fg:w="21911138"/><text x="65.8698%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (21,911,138 samples, 0.34%)</title><rect x="65.6198%" y="261" width="0.3434%" height="15" fill="rgb(224,137,22)" fg:x="4187537947" fg:w="21911138"/><text x="65.8698%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (21,911,138 samples, 0.34%)</title><rect x="65.6198%" y="245" width="0.3434%" height="15" fill="rgb(254,70,32)" fg:x="4187537947" fg:w="21911138"/><text x="65.8698%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (3,143,628 samples, 0.05%)</title><rect x="65.9632%" y="293" width="0.0493%" height="15" fill="rgb(229,75,37)" fg:x="4209449085" fg:w="3143628"/><text x="66.2132%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (59,203,825 samples, 0.93%)</title><rect x="66.0124%" y="293" width="0.9277%" height="15" fill="rgb(252,64,23)" fg:x="4212592713" fg:w="59203825"/><text x="66.2624%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (46,629,829 samples, 0.73%)</title><rect x="66.9402%" y="293" width="0.7307%" height="15" fill="rgb(232,162,48)" fg:x="4271796538" fg:w="46629829"/><text x="67.1902%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (46,629,829 samples, 0.73%)</title><rect x="66.9402%" y="277" width="0.7307%" height="15" fill="rgb(246,160,12)" fg:x="4271796538" fg:w="46629829"/><text x="67.1902%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46,629,829 samples, 0.73%)</title><rect x="66.9402%" y="261" width="0.7307%" height="15" fill="rgb(247,166,0)" fg:x="4271796538" fg:w="46629829"/><text x="67.1902%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (93,728,895 samples, 1.47%)</title><rect x="67.6709%" y="293" width="1.4688%" height="15" fill="rgb(249,219,21)" fg:x="4318426367" fg:w="93728895"/><text x="67.9209%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (93,728,895 samples, 1.47%)</title><rect x="67.6709%" y="277" width="1.4688%" height="15" fill="rgb(205,209,3)" fg:x="4318426367" fg:w="93728895"/><text x="67.9209%" y="287.50"></text></g><g><title>huff_tree_tap::huffman::HuffmanData::decode (3,748,395,836 samples, 58.74%)</title><rect x="11.0332%" y="437" width="58.7383%" height="15" fill="rgb(243,44,1)" fg:x="704084706" fg:w="3748395836"/><text x="11.2832%" y="447.50">huff_tree_tap::huffman::HuffmanData::decode</text></g><g><title>huff_tree_tap::huffman::HuffmanData::huffman_decode (2,432,759,817 samples, 38.12%)</title><rect x="31.6495%" y="421" width="38.1220%" height="15" fill="rgb(206,159,16)" fg:x="2019720725" fg:w="2432759817"/><text x="31.8995%" y="431.50">huff_tree_tap::huffman::HuffmanData::huffman_decode</text></g><g><title>huff_tree_tap::encoding_map::EncodingMap::get_inverse (1,829,783,013 samples, 28.67%)</title><rect x="41.0984%" y="405" width="28.6732%" height="15" fill="rgb(244,77,30)" fg:x="2622697529" fg:w="1829783013"/><text x="41.3484%" y="415.50">huff_tree_tap::encoding_map::EncodingMap::get_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,829,783,013 samples, 28.67%)</title><rect x="41.0984%" y="389" width="28.6732%" height="15" fill="rgb(218,69,12)" fg:x="2622697529" fg:w="1829783013"/><text x="41.3484%" y="399.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::g..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,829,783,013 samples, 28.67%)</title><rect x="41.0984%" y="373" width="28.6732%" height="15" fill="rgb(212,87,7)" fg:x="2622697529" fg:w="1829783013"/><text x="41.3484%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,829,783,013 samples, 28.67%)</title><rect x="41.0984%" y="357" width="28.6732%" height="15" fill="rgb(245,114,25)" fg:x="2622697529" fg:w="1829783013"/><text x="41.3484%" y="367.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (531,120,601 samples, 8.32%)</title><rect x="61.4487%" y="341" width="8.3228%" height="15" fill="rgb(210,61,42)" fg:x="3921359941" fg:w="531120601"/><text x="61.6987%" y="351.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (531,120,601 samples, 8.32%)</title><rect x="61.4487%" y="325" width="8.3228%" height="15" fill="rgb(211,52,33)" fg:x="3921359941" fg:w="531120601"/><text x="61.6987%" y="335.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (527,975,260 samples, 8.27%)</title><rect x="61.4980%" y="309" width="8.2735%" height="15" fill="rgb(234,58,33)" fg:x="3924505282" fg:w="527975260"/><text x="61.7480%" y="319.50">hashbrown::r..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (40,325,280 samples, 0.63%)</title><rect x="69.1396%" y="293" width="0.6319%" height="15" fill="rgb(220,115,36)" fg:x="4412155262" fg:w="40325280"/><text x="69.3896%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (40,325,280 samples, 0.63%)</title><rect x="69.1396%" y="277" width="0.6319%" height="15" fill="rgb(243,153,54)" fg:x="4412155262" fg:w="40325280"/><text x="69.3896%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (40,325,280 samples, 0.63%)</title><rect x="69.1396%" y="261" width="0.6319%" height="15" fill="rgb(251,47,18)" fg:x="4412155262" fg:w="40325280"/><text x="69.3896%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (9,591,237 samples, 0.15%)</title><rect x="70.3581%" y="389" width="0.1503%" height="15" fill="rgb(242,102,42)" fg:x="4489913255" fg:w="9591237"/><text x="70.6081%" y="399.50"></text></g><g><title>alloc::string::String::as_str (9,591,237 samples, 0.15%)</title><rect x="70.3581%" y="373" width="0.1503%" height="15" fill="rgb(234,31,38)" fg:x="4489913255" fg:w="9591237"/><text x="70.6081%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (9,591,237 samples, 0.15%)</title><rect x="70.3581%" y="357" width="0.1503%" height="15" fill="rgb(221,117,51)" fg:x="4489913255" fg:w="9591237"/><text x="70.6081%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3,169,569 samples, 0.05%)</title><rect x="70.4587%" y="341" width="0.0497%" height="15" fill="rgb(212,20,18)" fg:x="4496334923" fg:w="3169569"/><text x="70.7087%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,169,569 samples, 0.05%)</title><rect x="70.4587%" y="325" width="0.0497%" height="15" fill="rgb(245,133,36)" fg:x="4496334923" fg:w="3169569"/><text x="70.7087%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,169,569 samples, 0.05%)</title><rect x="70.4587%" y="309" width="0.0497%" height="15" fill="rgb(212,6,19)" fg:x="4496334923" fg:w="3169569"/><text x="70.7087%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,169,569 samples, 0.05%)</title><rect x="70.4587%" y="293" width="0.0497%" height="15" fill="rgb(218,1,36)" fg:x="4496334923" fg:w="3169569"/><text x="70.7087%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6,369,200 samples, 0.10%)</title><rect x="70.7525%" y="229" width="0.0998%" height="15" fill="rgb(246,84,54)" fg:x="4515080734" fg:w="6369200"/><text x="71.0025%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (9,575,169 samples, 0.15%)</title><rect x="70.8523%" y="229" width="0.1500%" height="15" fill="rgb(242,110,6)" fg:x="4521449934" fg:w="9575169"/><text x="71.1023%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3,044,612 samples, 0.05%)</title><rect x="71.1515%" y="213" width="0.0477%" height="15" fill="rgb(214,47,5)" fg:x="4540540541" fg:w="3044612"/><text x="71.4015%" y="223.50"></text></g><g><title>alloc::string::String::reserve (109,278,712 samples, 1.71%)</title><rect x="70.5575%" y="325" width="1.7124%" height="15" fill="rgb(218,159,25)" fg:x="4502635216" fg:w="109278712"/><text x="70.8075%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (109,278,712 samples, 1.71%)</title><rect x="70.5575%" y="309" width="1.7124%" height="15" fill="rgb(215,211,28)" fg:x="4502635216" fg:w="109278712"/><text x="70.8075%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (109,278,712 samples, 1.71%)</title><rect x="70.5575%" y="293" width="1.7124%" height="15" fill="rgb(238,59,32)" fg:x="4502635216" fg:w="109278712"/><text x="70.8075%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (109,278,712 samples, 1.71%)</title><rect x="70.5575%" y="277" width="1.7124%" height="15" fill="rgb(226,82,3)" fg:x="4502635216" fg:w="109278712"/><text x="70.8075%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (106,174,231 samples, 1.66%)</title><rect x="70.6061%" y="261" width="1.6638%" height="15" fill="rgb(240,164,32)" fg:x="4505739697" fg:w="106174231"/><text x="70.8561%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (106,174,231 samples, 1.66%)</title><rect x="70.6061%" y="245" width="1.6638%" height="15" fill="rgb(232,46,7)" fg:x="4505739697" fg:w="106174231"/><text x="70.8561%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (80,888,825 samples, 1.27%)</title><rect x="71.0023%" y="229" width="1.2675%" height="15" fill="rgb(229,129,53)" fg:x="4531025103" fg:w="80888825"/><text x="71.2523%" y="239.50"></text></g><g><title>malloc (68,328,775 samples, 1.07%)</title><rect x="71.1992%" y="213" width="1.0707%" height="15" fill="rgb(234,188,29)" fg:x="4543585153" fg:w="68328775"/><text x="71.4492%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::BitVector&gt;::to_string::_{{closure}} (12,393,055 samples, 0.19%)</title><rect x="72.9575%" y="261" width="0.1942%" height="15" fill="rgb(246,141,4)" fg:x="4655796236" fg:w="12393055"/><text x="73.2075%" y="271.50"></text></g><g><title>&lt;u8 as huff_tree_tap::data::ToFromChar&gt;::to_char (12,393,055 samples, 0.19%)</title><rect x="72.9575%" y="245" width="0.1942%" height="15" fill="rgb(229,23,39)" fg:x="4655796236" fg:w="12393055"/><text x="73.2075%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (12,489,593 samples, 0.20%)</title><rect x="73.5887%" y="197" width="0.1957%" height="15" fill="rgb(206,12,3)" fg:x="4696075460" fg:w="12489593"/><text x="73.8387%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (12,489,593 samples, 0.20%)</title><rect x="73.5887%" y="181" width="0.1957%" height="15" fill="rgb(252,226,20)" fg:x="4696075460" fg:w="12489593"/><text x="73.8387%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (12,489,593 samples, 0.20%)</title><rect x="73.5887%" y="165" width="0.1957%" height="15" fill="rgb(216,123,35)" fg:x="4696075460" fg:w="12489593"/><text x="73.8387%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (12,489,593 samples, 0.20%)</title><rect x="73.5887%" y="149" width="0.1957%" height="15" fill="rgb(212,68,40)" fg:x="4696075460" fg:w="12489593"/><text x="73.8387%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (326,845,432 samples, 5.12%)</title><rect x="70.5575%" y="341" width="5.1218%" height="15" fill="rgb(254,125,32)" fg:x="4502635216" fg:w="326845432"/><text x="70.8075%" y="351.50">&lt;alloc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (217,566,720 samples, 3.41%)</title><rect x="72.2699%" y="325" width="3.4093%" height="15" fill="rgb(253,97,22)" fg:x="4611913928" fg:w="217566720"/><text x="72.5199%" y="335.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (217,566,720 samples, 3.41%)</title><rect x="72.2699%" y="309" width="3.4093%" height="15" fill="rgb(241,101,14)" fg:x="4611913928" fg:w="217566720"/><text x="72.5199%" y="319.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (217,566,720 samples, 3.41%)</title><rect x="72.2699%" y="293" width="3.4093%" height="15" fill="rgb(238,103,29)" fg:x="4611913928" fg:w="217566720"/><text x="72.5199%" y="303.50">&lt;co..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (173,684,412 samples, 2.72%)</title><rect x="72.9575%" y="277" width="2.7217%" height="15" fill="rgb(233,195,47)" fg:x="4655796236" fg:w="173684412"/><text x="73.2075%" y="287.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (161,291,357 samples, 2.53%)</title><rect x="73.1517%" y="261" width="2.5275%" height="15" fill="rgb(246,218,30)" fg:x="4668189291" fg:w="161291357"/><text x="73.4017%" y="271.50">co..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (161,291,357 samples, 2.53%)</title><rect x="73.1517%" y="245" width="2.5275%" height="15" fill="rgb(219,145,47)" fg:x="4668189291" fg:w="161291357"/><text x="73.4017%" y="255.50">&lt;a..</text></g><g><title>alloc::string::String::push (161,291,357 samples, 2.53%)</title><rect x="73.1517%" y="229" width="2.5275%" height="15" fill="rgb(243,12,26)" fg:x="4668189291" fg:w="161291357"/><text x="73.4017%" y="239.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (161,291,357 samples, 2.53%)</title><rect x="73.1517%" y="213" width="2.5275%" height="15" fill="rgb(214,87,16)" fg:x="4668189291" fg:w="161291357"/><text x="73.4017%" y="223.50">al..</text></g><g><title>core::ptr::write (120,915,595 samples, 1.89%)</title><rect x="73.7844%" y="197" width="1.8948%" height="15" fill="rgb(208,99,42)" fg:x="4708565053" fg:w="120915595"/><text x="74.0344%" y="207.50">c..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (333,133,474 samples, 5.22%)</title><rect x="70.5084%" y="357" width="5.2203%" height="15" fill="rgb(253,99,2)" fg:x="4499504492" fg:w="333133474"/><text x="70.7584%" y="367.50">&lt;alloc..</text></g><g><title>alloc::string::String::new (3,157,318 samples, 0.05%)</title><rect x="75.6792%" y="341" width="0.0495%" height="15" fill="rgb(220,168,23)" fg:x="4829480648" fg:w="3157318"/><text x="75.9292%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::BitVector&gt;::to_string (339,292,236 samples, 5.32%)</title><rect x="70.5084%" y="389" width="5.3168%" height="15" fill="rgb(242,38,24)" fg:x="4499504492" fg:w="339292236"/><text x="70.7584%" y="399.50">&lt;alloc:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (339,292,236 samples, 5.32%)</title><rect x="70.5084%" y="373" width="5.3168%" height="15" fill="rgb(225,182,9)" fg:x="4499504492" fg:w="339292236"/><text x="70.7584%" y="383.50">core::i..</text></g><g><title>[libc.so.6] (6,158,762 samples, 0.10%)</title><rect x="75.7287%" y="357" width="0.0965%" height="15" fill="rgb(243,178,37)" fg:x="4832637966" fg:w="6158762"/><text x="75.9787%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6,158,762 samples, 0.10%)</title><rect x="75.7287%" y="341" width="0.0965%" height="15" fill="rgb(232,139,19)" fg:x="4832637966" fg:w="6158762"/><text x="75.9787%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (3,080,433 samples, 0.05%)</title><rect x="75.7769%" y="325" width="0.0483%" height="15" fill="rgb(225,201,24)" fg:x="4835716295" fg:w="3080433"/><text x="76.0269%" y="335.50"></text></g><g><title>alloc::string::String::reserve (3,080,433 samples, 0.05%)</title><rect x="75.7769%" y="309" width="0.0483%" height="15" fill="rgb(221,47,46)" fg:x="4835716295" fg:w="3080433"/><text x="76.0269%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,080,433 samples, 0.05%)</title><rect x="75.7769%" y="293" width="0.0483%" height="15" fill="rgb(249,23,13)" fg:x="4835716295" fg:w="3080433"/><text x="76.0269%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,080,433 samples, 0.05%)</title><rect x="75.7769%" y="277" width="0.0483%" height="15" fill="rgb(219,9,5)" fg:x="4835716295" fg:w="3080433"/><text x="76.0269%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,080,433 samples, 0.05%)</title><rect x="75.7769%" y="261" width="0.0483%" height="15" fill="rgb(254,171,16)" fg:x="4835716295" fg:w="3080433"/><text x="76.0269%" y="271.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (9,397,956 samples, 0.15%)</title><rect x="76.1215%" y="373" width="0.1473%" height="15" fill="rgb(230,171,20)" fg:x="4857708162" fg:w="9397956"/><text x="76.3715%" y="383.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (3,126,319 samples, 0.05%)</title><rect x="76.2198%" y="357" width="0.0490%" height="15" fill="rgb(210,71,41)" fg:x="4863979799" fg:w="3126319"/><text x="76.4698%" y="367.50"></text></g><g><title>core::num::&lt;impl u8&gt;::checked_add (21,694,726 samples, 0.34%)</title><rect x="76.2688%" y="373" width="0.3400%" height="15" fill="rgb(206,173,20)" fg:x="4867106118" fg:w="21694726"/><text x="76.5188%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::from_str_radix (53,102,897 samples, 0.83%)</title><rect x="75.8252%" y="389" width="0.8321%" height="15" fill="rgb(233,88,34)" fg:x="4838796728" fg:w="53102897"/><text x="76.0752%" y="399.50"></text></g><g><title>core::num::&lt;impl u8&gt;::checked_mul (3,098,781 samples, 0.05%)</title><rect x="76.6088%" y="373" width="0.0486%" height="15" fill="rgb(223,209,46)" fg:x="4888800844" fg:w="3098781"/><text x="76.8588%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::overflowing_mul (3,098,781 samples, 0.05%)</title><rect x="76.6088%" y="357" width="0.0486%" height="15" fill="rgb(250,43,18)" fg:x="4888800844" fg:w="3098781"/><text x="76.8588%" y="367.50"></text></g><g><title>[libc.so.6] (3,076,036 samples, 0.05%)</title><rect x="76.6573%" y="245" width="0.0482%" height="15" fill="rgb(208,13,10)" fg:x="4891899625" fg:w="3076036"/><text x="76.9073%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,076,036 samples, 0.05%)</title><rect x="76.6573%" y="229" width="0.0482%" height="15" fill="rgb(212,200,36)" fg:x="4891899625" fg:w="3076036"/><text x="76.9073%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::ToByte&gt;::to_byte (483,015,452 samples, 7.57%)</title><rect x="70.3581%" y="405" width="7.5690%" height="15" fill="rgb(225,90,30)" fg:x="4489913255" fg:w="483015452"/><text x="70.6081%" y="415.50">&lt;alloc::ve..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="389" width="1.2697%" height="15" fill="rgb(236,182,39)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="373" width="1.2697%" height="15" fill="rgb(212,144,35)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="357" width="1.2697%" height="15" fill="rgb(228,63,44)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="341" width="1.2697%" height="15" fill="rgb(228,109,6)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="325" width="1.2697%" height="15" fill="rgb(238,117,24)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="309" width="1.2697%" height="15" fill="rgb(242,26,26)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="293" width="1.2697%" height="15" fill="rgb(221,92,48)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="303.50"></text></g><g><title>__rdl_dealloc (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="277" width="1.2697%" height="15" fill="rgb(209,209,32)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (81,029,082 samples, 1.27%)</title><rect x="76.6573%" y="261" width="1.2697%" height="15" fill="rgb(221,70,22)" fg:x="4891899625" fg:w="81029082"/><text x="76.9073%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (77,953,046 samples, 1.22%)</title><rect x="76.7055%" y="245" width="1.2215%" height="15" fill="rgb(248,145,5)" fg:x="4894975661" fg:w="77953046"/><text x="76.9555%" y="255.50"></text></g><g><title>_int_free (43,532,222 samples, 0.68%)</title><rect x="77.2449%" y="229" width="0.6822%" height="15" fill="rgb(226,116,26)" fg:x="4929396485" fg:w="43532222"/><text x="77.4949%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,170,934 samples, 0.05%)</title><rect x="77.9271%" y="405" width="0.0497%" height="15" fill="rgb(244,5,17)" fg:x="4972928707" fg:w="3170934"/><text x="78.1771%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,122,688 samples, 0.05%)</title><rect x="78.6149%" y="341" width="0.0489%" height="15" fill="rgb(252,159,33)" fg:x="5016820275" fg:w="3122688"/><text x="78.8649%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (9,143,584 samples, 0.14%)</title><rect x="78.6638%" y="341" width="0.1433%" height="15" fill="rgb(206,71,0)" fg:x="5019942963" fg:w="9143584"/><text x="78.9138%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (9,345,071 samples, 0.15%)</title><rect x="79.0462%" y="325" width="0.1464%" height="15" fill="rgb(233,118,54)" fg:x="5044346278" fg:w="9345071"/><text x="79.2962%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (83,227,937 samples, 1.30%)</title><rect x="78.8071%" y="341" width="1.3042%" height="15" fill="rgb(234,83,48)" fg:x="5029086547" fg:w="83227937"/><text x="79.0571%" y="351.50"></text></g><g><title>malloc (58,623,135 samples, 0.92%)</title><rect x="79.1927%" y="325" width="0.9186%" height="15" fill="rgb(228,3,54)" fg:x="5053691349" fg:w="58623135"/><text x="79.4427%" y="335.50"></text></g><g><title>core::cmp::max (3,144,618 samples, 0.05%)</title><rect x="80.1113%" y="341" width="0.0493%" height="15" fill="rgb(226,155,13)" fg:x="5112314484" fg:w="3144618"/><text x="80.3613%" y="351.50"></text></g><g><title>core::cmp::Ord::max (3,144,618 samples, 0.05%)</title><rect x="80.1113%" y="325" width="0.0493%" height="15" fill="rgb(241,28,37)" fg:x="5112314484" fg:w="3144618"/><text x="80.3613%" y="335.50"></text></g><g><title>core::cmp::max_by (3,144,618 samples, 0.05%)</title><rect x="80.1113%" y="309" width="0.0493%" height="15" fill="rgb(233,93,10)" fg:x="5112314484" fg:w="3144618"/><text x="80.3613%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (104,913,492 samples, 1.64%)</title><rect x="78.5644%" y="389" width="1.6440%" height="15" fill="rgb(225,113,19)" fg:x="5013598143" fg:w="104913492"/><text x="78.8144%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (104,913,492 samples, 1.64%)</title><rect x="78.5644%" y="373" width="1.6440%" height="15" fill="rgb(241,2,18)" fg:x="5013598143" fg:w="104913492"/><text x="78.8144%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (104,913,492 samples, 1.64%)</title><rect x="78.5644%" y="357" width="1.6440%" height="15" fill="rgb(228,207,21)" fg:x="5013598143" fg:w="104913492"/><text x="78.8144%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3,052,533 samples, 0.05%)</title><rect x="80.1606%" y="341" width="0.0478%" height="15" fill="rgb(213,211,35)" fg:x="5115459102" fg:w="3052533"/><text x="80.4106%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (12,587,454 samples, 0.20%)</title><rect x="80.2084%" y="389" width="0.1972%" height="15" fill="rgb(209,83,10)" fg:x="5118511635" fg:w="12587454"/><text x="80.4584%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (12,587,454 samples, 0.20%)</title><rect x="80.2084%" y="373" width="0.1972%" height="15" fill="rgb(209,164,1)" fg:x="5118511635" fg:w="12587454"/><text x="80.4584%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (12,587,454 samples, 0.20%)</title><rect x="80.2084%" y="357" width="0.1972%" height="15" fill="rgb(213,184,43)" fg:x="5118511635" fg:w="12587454"/><text x="80.4584%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (12,587,454 samples, 0.20%)</title><rect x="80.2084%" y="341" width="0.1972%" height="15" fill="rgb(231,61,34)" fg:x="5118511635" fg:w="12587454"/><text x="80.4584%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (189,363,974 samples, 2.97%)</title><rect x="77.9768%" y="405" width="2.9674%" height="15" fill="rgb(235,75,3)" fg:x="4976099641" fg:w="189363974"/><text x="78.2268%" y="415.50">all..</text></g><g><title>core::ptr::write (34,364,526 samples, 0.54%)</title><rect x="80.4057%" y="389" width="0.5385%" height="15" fill="rgb(220,106,47)" fg:x="5131099089" fg:w="34364526"/><text x="80.6557%" y="399.50"></text></g><g><title>[libc.so.6] (3,116,292 samples, 0.05%)</title><rect x="80.9442%" y="277" width="0.0488%" height="15" fill="rgb(210,196,33)" fg:x="5165463615" fg:w="3116292"/><text x="81.1942%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,116,292 samples, 0.05%)</title><rect x="80.9442%" y="261" width="0.0488%" height="15" fill="rgb(229,154,42)" fg:x="5165463615" fg:w="3116292"/><text x="81.1942%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::Padded&gt;::to_vec_u8 (824,837,341 samples, 12.93%)</title><rect x="69.7715%" y="421" width="12.9254%" height="15" fill="rgb(228,114,26)" fg:x="4452480542" fg:w="824837341"/><text x="70.0215%" y="431.50">&lt;alloc::vec::Vec&lt;u8..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (111,854,268 samples, 1.75%)</title><rect x="80.9442%" y="405" width="1.7528%" height="15" fill="rgb(208,144,1)" fg:x="5165463615" fg:w="111854268"/><text x="81.1942%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (111,854,268 samples, 1.75%)</title><rect x="80.9442%" y="389" width="1.7528%" height="15" fill="rgb(239,112,37)" fg:x="5165463615" fg:w="111854268"/><text x="81.1942%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (111,854,268 samples, 1.75%)</title><rect x="80.9442%" y="373" width="1.7528%" height="15" fill="rgb(210,96,50)" fg:x="5165463615" fg:w="111854268"/><text x="81.1942%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (111,854,268 samples, 1.75%)</title><rect x="80.9442%" y="357" width="1.7528%" height="15" fill="rgb(222,178,2)" fg:x="5165463615" fg:w="111854268"/><text x="81.1942%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (111,854,268 samples, 1.75%)</title><rect x="80.9442%" y="341" width="1.7528%" height="15" fill="rgb(226,74,18)" fg:x="5165463615" fg:w="111854268"/><text x="81.1942%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (111,854,268 samples, 1.75%)</title><rect x="80.9442%" y="325" width="1.7528%" height="15" fill="rgb(225,67,54)" fg:x="5165463615" fg:w="111854268"/><text x="81.1942%" y="335.50"></text></g><g><title>__rdl_dealloc (111,854,268 samples, 1.75%)</title><rect x="80.9442%" y="309" width="1.7528%" height="15" fill="rgb(251,92,32)" fg:x="5165463615" fg:w="111854268"/><text x="81.1942%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (111,854,268 samples, 1.75%)</title><rect x="80.9442%" y="293" width="1.7528%" height="15" fill="rgb(228,149,22)" fg:x="5165463615" fg:w="111854268"/><text x="81.1942%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (108,737,976 samples, 1.70%)</title><rect x="80.9930%" y="277" width="1.7040%" height="15" fill="rgb(243,54,13)" fg:x="5168579907" fg:w="108737976"/><text x="81.2430%" y="287.50"></text></g><g><title>_int_free (61,930,662 samples, 0.97%)</title><rect x="81.7265%" y="261" width="0.9705%" height="15" fill="rgb(243,180,28)" fg:x="5215387221" fg:w="61930662"/><text x="81.9765%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28,627,216 samples, 0.45%)</title><rect x="83.1738%" y="405" width="0.4486%" height="15" fill="rgb(208,167,24)" fg:x="5307746232" fg:w="28627216"/><text x="83.4238%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (28,627,216 samples, 0.45%)</title><rect x="83.1738%" y="389" width="0.4486%" height="15" fill="rgb(245,73,45)" fg:x="5307746232" fg:w="28627216"/><text x="83.4238%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (36,745,504 samples, 0.58%)</title><rect x="83.6224%" y="405" width="0.5758%" height="15" fill="rgb(237,203,48)" fg:x="5336373448" fg:w="36745504"/><text x="83.8724%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (36,745,504 samples, 0.58%)</title><rect x="83.6224%" y="389" width="0.5758%" height="15" fill="rgb(211,197,16)" fg:x="5336373448" fg:w="36745504"/><text x="83.8724%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33,632,460 samples, 0.53%)</title><rect x="83.6711%" y="373" width="0.5270%" height="15" fill="rgb(243,99,51)" fg:x="5339486492" fg:w="33632460"/><text x="83.9211%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (30,989,488 samples, 0.49%)</title><rect x="83.7126%" y="357" width="0.4856%" height="15" fill="rgb(215,123,29)" fg:x="5342129464" fg:w="30989488"/><text x="83.9626%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3,035,695 samples, 0.05%)</title><rect x="84.5174%" y="389" width="0.0476%" height="15" fill="rgb(239,186,37)" fg:x="5393487663" fg:w="3035695"/><text x="84.7674%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,035,695 samples, 0.05%)</title><rect x="84.5174%" y="373" width="0.0476%" height="15" fill="rgb(252,136,39)" fg:x="5393487663" fg:w="3035695"/><text x="84.7674%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,035,695 samples, 0.05%)</title><rect x="84.5174%" y="357" width="0.0476%" height="15" fill="rgb(223,213,32)" fg:x="5393487663" fg:w="3035695"/><text x="84.7674%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,035,695 samples, 0.05%)</title><rect x="84.5174%" y="341" width="0.0476%" height="15" fill="rgb(233,115,5)" fg:x="5393487663" fg:w="3035695"/><text x="84.7674%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as huff_tree_tap::data::UnPadded&gt;::pad (154,747,402 samples, 2.42%)</title><rect x="82.6969%" y="421" width="2.4249%" height="15" fill="rgb(207,226,44)" fg:x="5277317883" fg:w="154747402"/><text x="82.9469%" y="431.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (58,946,333 samples, 0.92%)</title><rect x="84.1982%" y="405" width="0.9237%" height="15" fill="rgb(208,126,0)" fg:x="5373118952" fg:w="58946333"/><text x="84.4482%" y="415.50"></text></g><g><title>core::ptr::write (35,541,927 samples, 0.56%)</title><rect x="84.5649%" y="389" width="0.5570%" height="15" fill="rgb(244,66,21)" fg:x="5396523358" fg:w="35541927"/><text x="84.8149%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9,125,603 samples, 0.14%)</title><rect x="86.0381%" y="277" width="0.1430%" height="15" fill="rgb(222,97,12)" fg:x="5490535442" fg:w="9125603"/><text x="86.2881%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (30,273,654 samples, 0.47%)</title><rect x="85.9919%" y="293" width="0.4744%" height="15" fill="rgb(219,213,19)" fg:x="5487588468" fg:w="30273654"/><text x="86.2419%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18,201,077 samples, 0.29%)</title><rect x="86.1811%" y="277" width="0.2852%" height="15" fill="rgb(252,169,30)" fg:x="5499661045" fg:w="18201077"/><text x="86.4311%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21,808,882 samples, 0.34%)</title><rect x="86.8066%" y="277" width="0.3418%" height="15" fill="rgb(206,32,51)" fg:x="5539574770" fg:w="21808882"/><text x="87.0566%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (132,571,921 samples, 2.08%)</title><rect x="85.4584%" y="341" width="2.0774%" height="15" fill="rgb(250,172,42)" fg:x="5453538306" fg:w="132571921"/><text x="85.7084%" y="351.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (132,571,921 samples, 2.08%)</title><rect x="85.4584%" y="325" width="2.0774%" height="15" fill="rgb(209,34,43)" fg:x="5453538306" fg:w="132571921"/><text x="85.7084%" y="335.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (132,571,921 samples, 2.08%)</title><rect x="85.4584%" y="309" width="2.0774%" height="15" fill="rgb(223,11,35)" fg:x="5453538306" fg:w="132571921"/><text x="85.7084%" y="319.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (68,248,105 samples, 1.07%)</title><rect x="86.4663%" y="293" width="1.0695%" height="15" fill="rgb(251,219,26)" fg:x="5517862122" fg:w="68248105"/><text x="86.7163%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24,726,575 samples, 0.39%)</title><rect x="87.1483%" y="277" width="0.3875%" height="15" fill="rgb(231,119,3)" fg:x="5561383652" fg:w="24726575"/><text x="87.3983%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (30,481,887 samples, 0.48%)</title><rect x="87.5358%" y="341" width="0.4777%" height="15" fill="rgb(216,97,11)" fg:x="5586110227" fg:w="30481887"/><text x="87.7858%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (6,378,910 samples, 0.10%)</title><rect x="87.9135%" y="325" width="0.1000%" height="15" fill="rgb(223,59,9)" fg:x="5610213204" fg:w="6378910"/><text x="88.1635%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (6,378,910 samples, 0.10%)</title><rect x="87.9135%" y="309" width="0.1000%" height="15" fill="rgb(233,93,31)" fg:x="5610213204" fg:w="6378910"/><text x="88.1635%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (6,378,910 samples, 0.10%)</title><rect x="87.9135%" y="293" width="0.1000%" height="15" fill="rgb(239,81,33)" fg:x="5610213204" fg:w="6378910"/><text x="88.1635%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (267,039,585 samples, 4.18%)</title><rect x="85.2639%" y="373" width="4.1846%" height="15" fill="rgb(213,120,34)" fg:x="5441127431" fg:w="267039585"/><text x="85.5139%" y="383.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (254,628,710 samples, 3.99%)</title><rect x="85.4584%" y="357" width="3.9901%" height="15" fill="rgb(243,49,53)" fg:x="5453538306" fg:w="254628710"/><text x="85.7084%" y="367.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (91,574,902 samples, 1.44%)</title><rect x="88.0135%" y="341" width="1.4350%" height="15" fill="rgb(247,216,33)" fg:x="5616592114" fg:w="91574902"/><text x="88.2635%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (91,574,902 samples, 1.44%)</title><rect x="88.0135%" y="325" width="1.4350%" height="15" fill="rgb(226,26,14)" fg:x="5616592114" fg:w="91574902"/><text x="88.2635%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u8 (91,574,902 samples, 1.44%)</title><rect x="88.0135%" y="309" width="1.4350%" height="15" fill="rgb(215,49,53)" fg:x="5616592114" fg:w="91574902"/><text x="88.2635%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (76,519,418 samples, 1.20%)</title><rect x="88.2494%" y="293" width="1.1991%" height="15" fill="rgb(245,162,40)" fg:x="5631647598" fg:w="76519418"/><text x="88.4994%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (76,519,418 samples, 1.20%)</title><rect x="88.2494%" y="277" width="1.1991%" height="15" fill="rgb(229,68,17)" fg:x="5631647598" fg:w="76519418"/><text x="88.4994%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (73,572,048 samples, 1.15%)</title><rect x="88.2956%" y="261" width="1.1529%" height="15" fill="rgb(213,182,10)" fg:x="5634594968" fg:w="73572048"/><text x="88.5456%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (36,754,070 samples, 0.58%)</title><rect x="88.8725%" y="245" width="0.5759%" height="15" fill="rgb(245,125,30)" fg:x="5671412946" fg:w="36754070"/><text x="89.1225%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,905,144 samples, 0.14%)</title><rect x="90.3526%" y="341" width="0.1395%" height="15" fill="rgb(232,202,2)" fg:x="5765862821" fg:w="8905144"/><text x="90.6026%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8,905,144 samples, 0.14%)</title><rect x="90.3526%" y="325" width="0.1395%" height="15" fill="rgb(237,140,51)" fg:x="5765862821" fg:w="8905144"/><text x="90.6026%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (8,905,144 samples, 0.14%)</title><rect x="90.3526%" y="309" width="0.1395%" height="15" fill="rgb(236,157,25)" fg:x="5765862821" fg:w="8905144"/><text x="90.6026%" y="319.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (8,905,144 samples, 0.14%)</title><rect x="90.3526%" y="293" width="0.1395%" height="15" fill="rgb(219,209,0)" fg:x="5765862821" fg:w="8905144"/><text x="90.6026%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (9,447,544 samples, 0.15%)</title><rect x="90.4921%" y="341" width="0.1480%" height="15" fill="rgb(240,116,54)" fg:x="5774767965" fg:w="9447544"/><text x="90.7421%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (9,447,544 samples, 0.15%)</title><rect x="90.4921%" y="325" width="0.1480%" height="15" fill="rgb(216,10,36)" fg:x="5774767965" fg:w="9447544"/><text x="90.7421%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (9,447,544 samples, 0.15%)</title><rect x="90.4921%" y="309" width="0.1480%" height="15" fill="rgb(222,72,44)" fg:x="5774767965" fg:w="9447544"/><text x="90.7421%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9,447,544 samples, 0.15%)</title><rect x="90.4921%" y="293" width="0.1480%" height="15" fill="rgb(232,159,9)" fg:x="5774767965" fg:w="9447544"/><text x="90.7421%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (24,665,940 samples, 0.39%)</title><rect x="90.6402%" y="341" width="0.3865%" height="15" fill="rgb(210,39,32)" fg:x="5784215509" fg:w="24665940"/><text x="90.8902%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (12,590,237 samples, 0.20%)</title><rect x="91.0267%" y="341" width="0.1973%" height="15" fill="rgb(216,194,45)" fg:x="5808881449" fg:w="12590237"/><text x="91.2767%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;u8,i64&gt; as huff_tree_tap::frequency_map::FrequencyMapping&gt;::build (401,443,182 samples, 6.29%)</title><rect x="85.1219%" y="421" width="6.2907%" height="15" fill="rgb(218,18,35)" fg:x="5432065285" fg:w="401443182"/><text x="85.3719%" y="431.50">&lt;std::co..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (392,381,036 samples, 6.15%)</title><rect x="85.2639%" y="405" width="6.1487%" height="15" fill="rgb(207,83,51)" fg:x="5441127431" fg:w="392381036"/><text x="85.5139%" y="415.50">std::col..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (392,381,036 samples, 6.15%)</title><rect x="85.2639%" y="389" width="6.1487%" height="15" fill="rgb(225,63,43)" fg:x="5441127431" fg:w="392381036"/><text x="85.5139%" y="399.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (125,341,451 samples, 1.96%)</title><rect x="89.4485%" y="373" width="1.9641%" height="15" fill="rgb(207,57,36)" fg:x="5708167016" fg:w="125341451"/><text x="89.6985%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (113,234,796 samples, 1.77%)</title><rect x="89.6382%" y="357" width="1.7744%" height="15" fill="rgb(216,99,33)" fg:x="5720273671" fg:w="113234796"/><text x="89.8882%" y="367.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12,036,781 samples, 0.19%)</title><rect x="91.2240%" y="341" width="0.1886%" height="15" fill="rgb(225,42,16)" fg:x="5821471686" fg:w="12036781"/><text x="91.4740%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12,036,781 samples, 0.19%)</title><rect x="91.2240%" y="325" width="0.1886%" height="15" fill="rgb(220,201,45)" fg:x="5821471686" fg:w="12036781"/><text x="91.4740%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14,913,672 samples, 0.23%)</title><rect x="91.9413%" y="357" width="0.2337%" height="15" fill="rgb(225,33,4)" fg:x="5867250850" fg:w="14913672"/><text x="92.1913%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14,913,672 samples, 0.23%)</title><rect x="91.9413%" y="341" width="0.2337%" height="15" fill="rgb(224,33,50)" fg:x="5867250850" fg:w="14913672"/><text x="92.1913%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (14,913,672 samples, 0.23%)</title><rect x="91.9413%" y="325" width="0.2337%" height="15" fill="rgb(246,198,51)" fg:x="5867250850" fg:w="14913672"/><text x="92.1913%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (14,913,672 samples, 0.23%)</title><rect x="91.9413%" y="309" width="0.2337%" height="15" fill="rgb(205,22,4)" fg:x="5867250850" fg:w="14913672"/><text x="92.1913%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (14,913,672 samples, 0.23%)</title><rect x="91.9413%" y="293" width="0.2337%" height="15" fill="rgb(206,3,8)" fg:x="5867250850" fg:w="14913672"/><text x="92.1913%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61,072,246 samples, 0.96%)</title><rect x="92.1750%" y="357" width="0.9570%" height="15" fill="rgb(251,23,15)" fg:x="5882164522" fg:w="61072246"/><text x="92.4250%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (61,072,246 samples, 0.96%)</title><rect x="92.1750%" y="341" width="0.9570%" height="15" fill="rgb(252,88,28)" fg:x="5882164522" fg:w="61072246"/><text x="92.4250%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (103,879,736 samples, 1.63%)</title><rect x="91.6498%" y="405" width="1.6278%" height="15" fill="rgb(212,127,14)" fg:x="5848648616" fg:w="103879736"/><text x="91.8998%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (103,879,736 samples, 1.63%)</title><rect x="91.6498%" y="389" width="1.6278%" height="15" fill="rgb(247,145,37)" fg:x="5848648616" fg:w="103879736"/><text x="91.8998%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (103,879,736 samples, 1.63%)</title><rect x="91.6498%" y="373" width="1.6278%" height="15" fill="rgb(209,117,53)" fg:x="5848648616" fg:w="103879736"/><text x="91.8998%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9,291,584 samples, 0.15%)</title><rect x="93.1321%" y="357" width="0.1456%" height="15" fill="rgb(212,90,42)" fg:x="5943236768" fg:w="9291584"/><text x="93.3821%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15,578,008 samples, 0.24%)</title><rect x="93.9862%" y="245" width="0.2441%" height="15" fill="rgb(218,164,37)" fg:x="5997741068" fg:w="15578008"/><text x="94.2362%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (48,716,213 samples, 0.76%)</title><rect x="93.9377%" y="261" width="0.7634%" height="15" fill="rgb(246,65,34)" fg:x="5994648822" fg:w="48716213"/><text x="94.1877%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30,045,959 samples, 0.47%)</title><rect x="94.2303%" y="245" width="0.4708%" height="15" fill="rgb(231,100,33)" fg:x="6013319076" fg:w="30045959"/><text x="94.4803%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (24,600,474 samples, 0.39%)</title><rect x="95.1774%" y="245" width="0.3855%" height="15" fill="rgb(228,126,14)" fg:x="6073758473" fg:w="24600474"/><text x="95.4274%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (130,913,304 samples, 2.05%)</title><rect x="93.7469%" y="309" width="2.0514%" height="15" fill="rgb(215,173,21)" fg:x="5982473697" fg:w="130913304"/><text x="93.9969%" y="319.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (130,913,304 samples, 2.05%)</title><rect x="93.7469%" y="293" width="2.0514%" height="15" fill="rgb(210,6,40)" fg:x="5982473697" fg:w="130913304"/><text x="93.9969%" y="303.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (130,913,304 samples, 2.05%)</title><rect x="93.7469%" y="277" width="2.0514%" height="15" fill="rgb(212,48,18)" fg:x="5982473697" fg:w="130913304"/><text x="93.9969%" y="287.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (70,021,966 samples, 1.10%)</title><rect x="94.7011%" y="261" width="1.0973%" height="15" fill="rgb(230,214,11)" fg:x="6043365035" fg:w="70021966"/><text x="94.9511%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15,028,054 samples, 0.24%)</title><rect x="95.5629%" y="245" width="0.2355%" height="15" fill="rgb(254,105,39)" fg:x="6098358947" fg:w="15028054"/><text x="95.8129%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (30,678,922 samples, 0.48%)</title><rect x="95.7984%" y="309" width="0.4807%" height="15" fill="rgb(245,158,5)" fg:x="6113387001" fg:w="30678922"/><text x="96.0484%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (12,158,488 samples, 0.19%)</title><rect x="96.0886%" y="293" width="0.1905%" height="15" fill="rgb(249,208,11)" fg:x="6131907435" fg:w="12158488"/><text x="96.3386%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12,158,488 samples, 0.19%)</title><rect x="96.0886%" y="277" width="0.1905%" height="15" fill="rgb(210,39,28)" fg:x="6131907435" fg:w="12158488"/><text x="96.3386%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (12,158,488 samples, 0.19%)</title><rect x="96.0886%" y="261" width="0.1905%" height="15" fill="rgb(211,56,53)" fg:x="6131907435" fg:w="12158488"/><text x="96.3386%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (240,262,993 samples, 3.76%)</title><rect x="93.5630%" y="341" width="3.7650%" height="15" fill="rgb(226,201,30)" fg:x="5970734048" fg:w="240262993"/><text x="93.8130%" y="351.50">hash..</text></g><g><title>core::hash::BuildHasher::hash_one (231,309,545 samples, 3.62%)</title><rect x="93.7033%" y="325" width="3.6247%" height="15" fill="rgb(239,101,34)" fg:x="5979687496" fg:w="231309545"/><text x="93.9533%" y="335.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (66,931,118 samples, 1.05%)</title><rect x="96.2791%" y="309" width="1.0488%" height="15" fill="rgb(226,209,5)" fg:x="6144065923" fg:w="66931118"/><text x="96.5291%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (66,931,118 samples, 1.05%)</title><rect x="96.2791%" y="293" width="1.0488%" height="15" fill="rgb(250,105,47)" fg:x="6144065923" fg:w="66931118"/><text x="96.5291%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (66,931,118 samples, 1.05%)</title><rect x="96.2791%" y="277" width="1.0488%" height="15" fill="rgb(230,72,3)" fg:x="6144065923" fg:w="66931118"/><text x="96.5291%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (51,714,438 samples, 0.81%)</title><rect x="96.5176%" y="261" width="0.8104%" height="15" fill="rgb(232,218,39)" fg:x="6159282603" fg:w="51714438"/><text x="96.7676%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (51,714,438 samples, 0.81%)</title><rect x="96.5176%" y="245" width="0.8104%" height="15" fill="rgb(248,166,6)" fg:x="6159282603" fg:w="51714438"/><text x="96.7676%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (51,714,438 samples, 0.81%)</title><rect x="96.5176%" y="229" width="0.8104%" height="15" fill="rgb(247,89,20)" fg:x="6159282603" fg:w="51714438"/><text x="96.7676%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (27,726,647 samples, 0.43%)</title><rect x="96.8935%" y="213" width="0.4345%" height="15" fill="rgb(248,130,54)" fg:x="6183270394" fg:w="27726647"/><text x="97.1435%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6,319,050 samples, 0.10%)</title><rect x="98.0045%" y="293" width="0.0990%" height="15" fill="rgb(234,196,4)" fg:x="6254171476" fg:w="6319050"/><text x="98.2545%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6,319,050 samples, 0.10%)</title><rect x="98.0045%" y="277" width="0.0990%" height="15" fill="rgb(250,143,31)" fg:x="6254171476" fg:w="6319050"/><text x="98.2545%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (6,319,050 samples, 0.10%)</title><rect x="98.0045%" y="261" width="0.0990%" height="15" fill="rgb(211,110,34)" fg:x="6254171476" fg:w="6319050"/><text x="98.2545%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (6,319,050 samples, 0.10%)</title><rect x="98.0045%" y="245" width="0.0990%" height="15" fill="rgb(215,124,48)" fg:x="6254171476" fg:w="6319050"/><text x="98.2545%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (15,107,978 samples, 0.24%)</title><rect x="98.1035%" y="293" width="0.2367%" height="15" fill="rgb(216,46,13)" fg:x="6260490526" fg:w="15107978"/><text x="98.3535%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (15,107,978 samples, 0.24%)</title><rect x="98.1035%" y="277" width="0.2367%" height="15" fill="rgb(205,184,25)" fg:x="6260490526" fg:w="15107978"/><text x="98.3535%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (15,107,978 samples, 0.24%)</title><rect x="98.1035%" y="261" width="0.2367%" height="15" fill="rgb(228,1,10)" fg:x="6260490526" fg:w="15107978"/><text x="98.3535%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15,107,978 samples, 0.24%)</title><rect x="98.1035%" y="245" width="0.2367%" height="15" fill="rgb(213,116,27)" fg:x="6260490526" fg:w="15107978"/><text x="98.3535%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (6,033,041 samples, 0.09%)</title><rect x="98.3403%" y="293" width="0.0945%" height="15" fill="rgb(241,95,50)" fg:x="6275598504" fg:w="6033041"/><text x="98.5903%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (12,351,103 samples, 0.19%)</title><rect x="98.4348%" y="293" width="0.1935%" height="15" fill="rgb(238,48,32)" fg:x="6281631545" fg:w="12351103"/><text x="98.6848%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (24,904,652 samples, 0.39%)</title><rect x="98.6283%" y="293" width="0.3903%" height="15" fill="rgb(235,113,49)" fg:x="6293982648" fg:w="24904652"/><text x="98.8783%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (24,904,652 samples, 0.39%)</title><rect x="98.6283%" y="277" width="0.3903%" height="15" fill="rgb(205,127,43)" fg:x="6293982648" fg:w="24904652"/><text x="98.8783%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24,904,652 samples, 0.39%)</title><rect x="98.6283%" y="261" width="0.3903%" height="15" fill="rgb(250,162,2)" fg:x="6293982648" fg:w="24904652"/><text x="98.8783%" y="271.50"></text></g><g><title>__GI___clone3 (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="869" width="89.7074%" height="15" fill="rgb(220,13,41)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="879.50">__GI___clone3</text></g><g><title>start_thread (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="853" width="89.7074%" height="15" fill="rgb(249,221,25)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="863.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="837" width="89.7074%" height="15" fill="rgb(215,208,19)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="847.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="821" width="89.7074%" height="15" fill="rgb(236,175,2)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="831.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="805" width="89.7074%" height="15" fill="rgb(241,52,2)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="815.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="789" width="89.7074%" height="15" fill="rgb(248,140,14)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="799.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="773" width="89.7074%" height="15" fill="rgb(253,22,42)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="783.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="757" width="89.7074%" height="15" fill="rgb(234,61,47)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="741" width="89.7074%" height="15" fill="rgb(208,226,15)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="725" width="89.7074%" height="15" fill="rgb(217,221,4)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="735.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="709" width="89.7074%" height="15" fill="rgb(212,174,34)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="719.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="693" width="89.7074%" height="15" fill="rgb(253,83,4)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="703.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="677" width="89.7074%" height="15" fill="rgb(250,195,49)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="687.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="661" width="89.7074%" height="15" fill="rgb(241,192,25)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="671.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="645" width="89.7074%" height="15" fill="rgb(208,124,10)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="655.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="629" width="89.7074%" height="15" fill="rgb(222,33,0)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="639.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="613" width="89.7074%" height="15" fill="rgb(234,209,28)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="597" width="89.7074%" height="15" fill="rgb(224,11,23)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="581" width="89.7074%" height="15" fill="rgb(232,99,1)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="591.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="565" width="89.7074%" height="15" fill="rgb(237,95,45)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="575.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::_{{closure}} (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="549" width="89.7074%" height="15" fill="rgb(208,109,11)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="559.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::types::RunnableTest::run (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="533" width="89.7074%" height="15" fill="rgb(216,190,48)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="543.50">test::types::RunnableTest::run</text></g><g><title>test::__rust_begin_short_backtrace (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="517" width="89.7074%" height="15" fill="rgb(251,171,36)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="527.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="501" width="89.7074%" height="15" fill="rgb(230,62,22)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="485" width="89.7074%" height="15" fill="rgb(225,114,35)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>tests::test_large_payload_1000_000::_{{closure}} (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="469" width="89.7074%" height="15" fill="rgb(215,118,42)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="479.50">tests::test_large_payload_1000_000::_{{closure}}</text></g><g><title>tests::test_large_payload_1000_000 (5,724,690,641 samples, 89.71%)</title><rect x="9.5043%" y="453" width="89.7074%" height="15" fill="rgb(243,119,21)" fg:x="606516676" fg:w="5724690641"/><text x="9.7543%" y="463.50">tests::test_large_payload_1000_000</text></g><g><title>huff_tree_tap::huffman::HuffmanData::new (1,878,726,775 samples, 29.44%)</title><rect x="69.7715%" y="437" width="29.4401%" height="15" fill="rgb(252,177,53)" fg:x="4452480542" fg:w="1878726775"/><text x="70.0215%" y="447.50">huff_tree_tap::huffman::HuffmanData::new</text></g><g><title>huff_tree_tap::huffman::HuffmanData::huffman_encode (497,698,850 samples, 7.80%)</title><rect x="91.4126%" y="421" width="7.7991%" height="15" fill="rgb(237,209,29)" fg:x="5833508467" fg:w="497698850"/><text x="91.6626%" y="431.50">huff_tree_t..</text></g><g><title>huff_tree_tap::encoding_map::EncodingMap::get (378,678,965 samples, 5.93%)</title><rect x="93.2777%" y="405" width="5.9340%" height="15" fill="rgb(212,65,23)" fg:x="5952528352" fg:w="378678965"/><text x="93.5277%" y="415.50">huff_tre..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (378,678,965 samples, 5.93%)</title><rect x="93.2777%" y="389" width="5.9340%" height="15" fill="rgb(230,222,46)" fg:x="5952528352" fg:w="378678965"/><text x="93.5277%" y="399.50">std::col..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (378,678,965 samples, 5.93%)</title><rect x="93.2777%" y="373" width="5.9340%" height="15" fill="rgb(215,135,32)" fg:x="5952528352" fg:w="378678965"/><text x="93.5277%" y="383.50">hashbrow..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (366,675,903 samples, 5.75%)</title><rect x="93.4658%" y="357" width="5.7459%" height="15" fill="rgb(246,101,22)" fg:x="5964531414" fg:w="366675903"/><text x="93.7158%" y="367.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (120,210,276 samples, 1.88%)</title><rect x="97.3279%" y="341" width="1.8837%" height="15" fill="rgb(206,107,13)" fg:x="6210997041" fg:w="120210276"/><text x="97.5779%" y="351.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (120,210,276 samples, 1.88%)</title><rect x="97.3279%" y="325" width="1.8837%" height="15" fill="rgb(250,100,44)" fg:x="6210997041" fg:w="120210276"/><text x="97.5779%" y="335.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (120,210,276 samples, 1.88%)</title><rect x="97.3279%" y="309" width="1.8837%" height="15" fill="rgb(231,147,38)" fg:x="6210997041" fg:w="120210276"/><text x="97.5779%" y="319.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12,320,017 samples, 0.19%)</title><rect x="99.0186%" y="293" width="0.1931%" height="15" fill="rgb(229,8,40)" fg:x="6318887300" fg:w="12320017"/><text x="99.2686%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12,320,017 samples, 0.19%)</title><rect x="99.0186%" y="277" width="0.1931%" height="15" fill="rgb(221,135,30)" fg:x="6318887300" fg:w="12320017"/><text x="99.2686%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,096,749 samples, 0.05%)</title><rect x="99.2117%" y="869" width="0.0485%" height="15" fill="rgb(249,193,18)" fg:x="6331207317" fg:w="3096749"/><text x="99.4617%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,096,749 samples, 0.05%)</title><rect x="99.2117%" y="853" width="0.0485%" height="15" fill="rgb(209,133,39)" fg:x="6331207317" fg:w="3096749"/><text x="99.4617%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (21,801,124 samples, 0.34%)</title><rect x="99.2602%" y="869" width="0.3416%" height="15" fill="rgb(232,100,14)" fg:x="6334304066" fg:w="21801124"/><text x="99.5102%" y="879.50"></text></g><g><title>cfree@GLIBC_2.2.5 (12,344,772 samples, 0.19%)</title><rect x="99.6018%" y="869" width="0.1934%" height="15" fill="rgb(224,185,1)" fg:x="6356105190" fg:w="12344772"/><text x="99.8518%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,098,021 samples, 0.05%)</title><rect x="99.7953%" y="869" width="0.0485%" height="15" fill="rgb(223,139,8)" fg:x="6368449962" fg:w="3098021"/><text x="100.0453%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,098,021 samples, 0.05%)</title><rect x="99.7953%" y="853" width="0.0485%" height="15" fill="rgb(232,213,38)" fg:x="6368449962" fg:w="3098021"/><text x="100.0453%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (3,098,021 samples, 0.05%)</title><rect x="99.7953%" y="837" width="0.0485%" height="15" fill="rgb(207,94,22)" fg:x="6368449962" fg:w="3098021"/><text x="100.0453%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u8 (3,098,021 samples, 0.05%)</title><rect x="99.7953%" y="821" width="0.0485%" height="15" fill="rgb(219,183,54)" fg:x="6368449962" fg:w="3098021"/><text x="100.0453%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,098,021 samples, 0.05%)</title><rect x="99.7953%" y="805" width="0.0485%" height="15" fill="rgb(216,185,54)" fg:x="6368449962" fg:w="3098021"/><text x="100.0453%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,098,021 samples, 0.05%)</title><rect x="99.7953%" y="789" width="0.0485%" height="15" fill="rgb(254,217,39)" fg:x="6368449962" fg:w="3098021"/><text x="100.0453%" y="799.50"></text></g><g><title>test_large_payl (6,363,179,285 samples, 99.71%)</title><rect x="0.2225%" y="885" width="99.7127%" height="15" fill="rgb(240,178,23)" fg:x="14200750" fg:w="6363179285"/><text x="0.4725%" y="895.50">test_large_payl</text></g><g><title>malloc (5,832,052 samples, 0.09%)</title><rect x="99.8438%" y="869" width="0.0914%" height="15" fill="rgb(218,11,47)" fg:x="6371547983" fg:w="5832052"/><text x="100.0938%" y="879.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="853" width="0.0464%" height="15" fill="rgb(218,51,51)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="863.50"></text></g><g><title>__libc_start_call_main (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="837" width="0.0464%" height="15" fill="rgb(238,126,27)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="847.50"></text></g><g><title>main (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="821" width="0.0464%" height="15" fill="rgb(249,202,22)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="831.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="805" width="0.0464%" height="15" fill="rgb(254,195,49)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="789" width="0.0464%" height="15" fill="rgb(208,123,14)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="799.50"></text></g><g><title>tests::main (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="773" width="0.0464%" height="15" fill="rgb(224,200,8)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="783.50"></text></g><g><title>test::test_main_static (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="757" width="0.0464%" height="15" fill="rgb(217,61,36)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="767.50"></text></g><g><title>test::test_main (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="741" width="0.0464%" height="15" fill="rgb(206,35,45)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="751.50"></text></g><g><title>test::cli::parse_opts (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="725" width="0.0464%" height="15" fill="rgb(217,65,33)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="735.50"></text></g><g><title>test::cli::parse_opts_impl (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="709" width="0.0464%" height="15" fill="rgb(222,158,48)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="719.50"></text></g><g><title>getopts::Matches::opt_present (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="693" width="0.0464%" height="15" fill="rgb(254,2,54)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="703.50"></text></g><g><title>getopts::Matches::opt_vals (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="677" width="0.0464%" height="15" fill="rgb(250,143,38)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="687.50"></text></g><g><title>malloc (2,959,556 samples, 0.05%)</title><rect x="99.9440%" y="661" width="0.0464%" height="15" fill="rgb(248,25,0)" fg:x="6377944537" fg:w="2959556"/><text x="100.1940%" y="671.50"></text></g><g><title>all (6,381,515,070 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(206,152,27)" fg:x="0" fg:w="6381515070"/><text x="0.2500%" y="911.50"></text></g><g><title>tests-b2da1999b (4,135,035 samples, 0.06%)</title><rect x="99.9352%" y="885" width="0.0648%" height="15" fill="rgb(240,77,30)" fg:x="6377380035" fg:w="4135035"/><text x="100.1852%" y="895.50"></text></g><g><title>_start (3,589,969 samples, 0.06%)</title><rect x="99.9437%" y="869" width="0.0563%" height="15" fill="rgb(231,5,3)" fg:x="6377925101" fg:w="3589969"/><text x="100.1937%" y="879.50"></text></g></svg></svg>